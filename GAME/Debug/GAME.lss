
GAME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00802000  00001988  00001a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000202  008020cc  008020cc  00001ae8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a565  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001a8a  00000000  00000000  0000c345  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006b9a  00000000  00000000  0000ddcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008a4  00000000  00000000  0001496c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002c2df  00000000  00000000  00015210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004705  00000000  00000000  000414ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003d0  00000000  00000000  00045bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b2d9  00000000  00000000  00045fc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	19 c2       	rjmp	.+1074   	; 0x4d0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	01 c2       	rjmp	.+1026   	; 0x4d0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ff c1       	rjmp	.+1022   	; 0x4d0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fb c1       	rjmp	.+1014   	; 0x4d0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f9 c1       	rjmp	.+1010   	; 0x4d0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d9 c1       	rjmp	.+946    	; 0x4d0 <__bad_interrupt>
     11e:	00 00       	nop
     120:	d7 c1       	rjmp	.+942    	; 0x4d0 <__bad_interrupt>
     122:	00 00       	nop
     124:	d5 c1       	rjmp	.+938    	; 0x4d0 <__bad_interrupt>
     126:	00 00       	nop
     128:	d3 c1       	rjmp	.+934    	; 0x4d0 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	cd c1       	rjmp	.+922    	; 0x4d0 <__bad_interrupt>
     136:	00 00       	nop
     138:	cb c1       	rjmp	.+918    	; 0x4d0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c9 c1       	rjmp	.+914    	; 0x4d0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	c7 c1       	rjmp	.+910    	; 0x4d0 <__bad_interrupt>
     142:	00 00       	nop
     144:	c5 c1       	rjmp	.+906    	; 0x4d0 <__bad_interrupt>
     146:	00 00       	nop
     148:	c3 c1       	rjmp	.+902    	; 0x4d0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c1 c1       	rjmp	.+898    	; 0x4d0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	bf c1       	rjmp	.+894    	; 0x4d0 <__bad_interrupt>
     152:	00 00       	nop
     154:	bd c1       	rjmp	.+890    	; 0x4d0 <__bad_interrupt>
     156:	00 00       	nop
     158:	bb c1       	rjmp	.+886    	; 0x4d0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8f c1       	rjmp	.+798    	; 0x4d0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8d c1       	rjmp	.+794    	; 0x4d0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8b c1       	rjmp	.+790    	; 0x4d0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	89 c1       	rjmp	.+786    	; 0x4d0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	87 c1       	rjmp	.+782    	; 0x4d0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	85 c1       	rjmp	.+778    	; 0x4d0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__trampolines_end+0x21e>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__trampolines_end+0x24e>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e8 e8       	ldi	r30, 0x88	; 136
     4a6:	f9 e1       	ldi	r31, 0x19	; 25
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	ac 3c       	cpi	r26, 0xCC	; 204
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	ac ec       	ldi	r26, 0xCC	; 204
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	ae 3c       	cpi	r26, 0xCE	; 206
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <main>
     4cc:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4d2:	bf 92       	push	r11
     4d4:	cf 92       	push	r12
     4d6:	df 92       	push	r13
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	1f 92       	push	r1
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     4ea:	88 e0       	ldi	r24, 0x08	; 8
     4ec:	e0 e0       	ldi	r30, 0x00	; 0
     4ee:	f6 e0       	ldi	r31, 0x06	; 6
     4f0:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     4f2:	85 83       	std	Z+5, r24	; 0x05
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     4f4:	0f 2e       	mov	r0, r31
     4f6:	fb e2       	ldi	r31, 0x2B	; 43
     4f8:	bf 2e       	mov	r11, r31
     4fa:	f0 2d       	mov	r31, r0
     4fc:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     4fe:	80 ea       	ldi	r24, 0xA0	; 160
     500:	99 e0       	ldi	r25, 0x09	; 9
     502:	ea d6       	rcall	.+3540   	; 0x12d8 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     504:	c1 2c       	mov	r12, r1
     506:	d1 2c       	mov	r13, r1
     508:	76 01       	movw	r14, r12
     50a:	00 e4       	ldi	r16, 0x40	; 64
     50c:	12 e4       	ldi	r17, 0x42	; 66
     50e:	2f e0       	ldi	r18, 0x0F	; 15
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	43 e0       	ldi	r20, 0x03	; 3
     514:	be 01       	movw	r22, r28
     516:	6f 5f       	subi	r22, 0xFF	; 255
     518:	7f 4f       	sbci	r23, 0xFF	; 255
     51a:	80 ea       	ldi	r24, 0xA0	; 160
     51c:	99 e0       	ldi	r25, 0x09	; 9
     51e:	0b d7       	rcall	.+3606   	; 0x1336 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     520:	00 e6       	ldi	r16, 0x60	; 96
     522:	16 e0       	ldi	r17, 0x06	; 6
     524:	ff 24       	eor	r15, r15
     526:	f3 94       	inc	r15
     528:	f8 01       	movw	r30, r16
     52a:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     52c:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     52e:	be 01       	movw	r22, r28
     530:	6f 5f       	subi	r22, 0xFF	; 255
     532:	7f 4f       	sbci	r23, 0xFF	; 255
     534:	80 ea       	ldi	r24, 0xA0	; 160
     536:	99 e0       	ldi	r25, 0x09	; 9
     538:	18 d7       	rcall	.+3632   	; 0x136a <usart_spi_select_device>
     53a:	f8 01       	movw	r30, r16
     53c:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     53e:	e0 ea       	ldi	r30, 0xA0	; 160
     540:	f9 e0       	ldi	r31, 0x09	; 9
     542:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     544:	85 ff       	sbrs	r24, 5
     546:	fd cf       	rjmp	.-6      	; 0x542 <st7565r_init+0x70>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     548:	80 ea       	ldi	r24, 0xA0	; 160
     54a:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     54e:	e0 ea       	ldi	r30, 0xA0	; 160
     550:	f9 e0       	ldi	r31, 0x09	; 9
     552:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     554:	86 ff       	sbrs	r24, 6
     556:	fd cf       	rjmp	.-6      	; 0x552 <st7565r_init+0x80>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     558:	e0 ea       	ldi	r30, 0xA0	; 160
     55a:	f9 e0       	ldi	r31, 0x09	; 9
     55c:	80 e4       	ldi	r24, 0x40	; 64
     55e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     560:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     562:	be 01       	movw	r22, r28
     564:	6f 5f       	subi	r22, 0xFF	; 255
     566:	7f 4f       	sbci	r23, 0xFF	; 255
     568:	80 ea       	ldi	r24, 0xA0	; 160
     56a:	99 e0       	ldi	r25, 0x09	; 9
     56c:	14 d7       	rcall	.+3624   	; 0x1396 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     56e:	8b e2       	ldi	r24, 0x2B	; 43
     570:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     572:	be 01       	movw	r22, r28
     574:	6f 5f       	subi	r22, 0xFF	; 255
     576:	7f 4f       	sbci	r23, 0xFF	; 255
     578:	80 ea       	ldi	r24, 0xA0	; 160
     57a:	99 e0       	ldi	r25, 0x09	; 9
     57c:	f6 d6       	rcall	.+3564   	; 0x136a <usart_spi_select_device>
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	e0 e6       	ldi	r30, 0x60	; 96
     582:	f6 e0       	ldi	r31, 0x06	; 6
     584:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     586:	e0 ea       	ldi	r30, 0xA0	; 160
     588:	f9 e0       	ldi	r31, 0x09	; 9
     58a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     58c:	85 ff       	sbrs	r24, 5
     58e:	fd cf       	rjmp	.-6      	; 0x58a <st7565r_init+0xb8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     590:	86 ea       	ldi	r24, 0xA6	; 166
     592:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     596:	e0 ea       	ldi	r30, 0xA0	; 160
     598:	f9 e0       	ldi	r31, 0x09	; 9
     59a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     59c:	86 ff       	sbrs	r24, 6
     59e:	fd cf       	rjmp	.-6      	; 0x59a <st7565r_init+0xc8>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5a0:	e0 ea       	ldi	r30, 0xA0	; 160
     5a2:	f9 e0       	ldi	r31, 0x09	; 9
     5a4:	80 e4       	ldi	r24, 0x40	; 64
     5a6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5a8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5aa:	be 01       	movw	r22, r28
     5ac:	6f 5f       	subi	r22, 0xFF	; 255
     5ae:	7f 4f       	sbci	r23, 0xFF	; 255
     5b0:	80 ea       	ldi	r24, 0xA0	; 160
     5b2:	99 e0       	ldi	r25, 0x09	; 9
     5b4:	f0 d6       	rcall	.+3552   	; 0x1396 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5b6:	8b e2       	ldi	r24, 0x2B	; 43
     5b8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5ba:	be 01       	movw	r22, r28
     5bc:	6f 5f       	subi	r22, 0xFF	; 255
     5be:	7f 4f       	sbci	r23, 0xFF	; 255
     5c0:	80 ea       	ldi	r24, 0xA0	; 160
     5c2:	99 e0       	ldi	r25, 0x09	; 9
     5c4:	d2 d6       	rcall	.+3492   	; 0x136a <usart_spi_select_device>
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	e0 e6       	ldi	r30, 0x60	; 96
     5ca:	f6 e0       	ldi	r31, 0x06	; 6
     5cc:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5ce:	e0 ea       	ldi	r30, 0xA0	; 160
     5d0:	f9 e0       	ldi	r31, 0x09	; 9
     5d2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5d4:	85 ff       	sbrs	r24, 5
     5d6:	fd cf       	rjmp	.-6      	; 0x5d2 <st7565r_init+0x100>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5d8:	88 ec       	ldi	r24, 0xC8	; 200
     5da:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5de:	e0 ea       	ldi	r30, 0xA0	; 160
     5e0:	f9 e0       	ldi	r31, 0x09	; 9
     5e2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5e4:	86 ff       	sbrs	r24, 6
     5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <st7565r_init+0x110>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5e8:	e0 ea       	ldi	r30, 0xA0	; 160
     5ea:	f9 e0       	ldi	r31, 0x09	; 9
     5ec:	80 e4       	ldi	r24, 0x40	; 64
     5ee:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5f0:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5f2:	be 01       	movw	r22, r28
     5f4:	6f 5f       	subi	r22, 0xFF	; 255
     5f6:	7f 4f       	sbci	r23, 0xFF	; 255
     5f8:	80 ea       	ldi	r24, 0xA0	; 160
     5fa:	99 e0       	ldi	r25, 0x09	; 9
     5fc:	cc d6       	rcall	.+3480   	; 0x1396 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5fe:	8b e2       	ldi	r24, 0x2B	; 43
     600:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     602:	be 01       	movw	r22, r28
     604:	6f 5f       	subi	r22, 0xFF	; 255
     606:	7f 4f       	sbci	r23, 0xFF	; 255
     608:	80 ea       	ldi	r24, 0xA0	; 160
     60a:	99 e0       	ldi	r25, 0x09	; 9
     60c:	ae d6       	rcall	.+3420   	; 0x136a <usart_spi_select_device>
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	e0 e6       	ldi	r30, 0x60	; 96
     612:	f6 e0       	ldi	r31, 0x06	; 6
     614:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     616:	e0 ea       	ldi	r30, 0xA0	; 160
     618:	f9 e0       	ldi	r31, 0x09	; 9
     61a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     61c:	85 ff       	sbrs	r24, 5
     61e:	fd cf       	rjmp	.-6      	; 0x61a <st7565r_init+0x148>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     620:	82 ea       	ldi	r24, 0xA2	; 162
     622:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     626:	e0 ea       	ldi	r30, 0xA0	; 160
     628:	f9 e0       	ldi	r31, 0x09	; 9
     62a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     62c:	86 ff       	sbrs	r24, 6
     62e:	fd cf       	rjmp	.-6      	; 0x62a <st7565r_init+0x158>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     630:	e0 ea       	ldi	r30, 0xA0	; 160
     632:	f9 e0       	ldi	r31, 0x09	; 9
     634:	80 e4       	ldi	r24, 0x40	; 64
     636:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     638:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	80 ea       	ldi	r24, 0xA0	; 160
     642:	99 e0       	ldi	r25, 0x09	; 9
     644:	a8 d6       	rcall	.+3408   	; 0x1396 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     646:	8b e2       	ldi	r24, 0x2B	; 43
     648:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     64a:	be 01       	movw	r22, r28
     64c:	6f 5f       	subi	r22, 0xFF	; 255
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	80 ea       	ldi	r24, 0xA0	; 160
     652:	99 e0       	ldi	r25, 0x09	; 9
     654:	8a d6       	rcall	.+3348   	; 0x136a <usart_spi_select_device>
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	e0 e6       	ldi	r30, 0x60	; 96
     65a:	f6 e0       	ldi	r31, 0x06	; 6
     65c:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     65e:	e0 ea       	ldi	r30, 0xA0	; 160
     660:	f9 e0       	ldi	r31, 0x09	; 9
     662:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     664:	85 ff       	sbrs	r24, 5
     666:	fd cf       	rjmp	.-6      	; 0x662 <st7565r_init+0x190>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     668:	8f e2       	ldi	r24, 0x2F	; 47
     66a:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     66e:	e0 ea       	ldi	r30, 0xA0	; 160
     670:	f9 e0       	ldi	r31, 0x09	; 9
     672:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     674:	86 ff       	sbrs	r24, 6
     676:	fd cf       	rjmp	.-6      	; 0x672 <st7565r_init+0x1a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     678:	e0 ea       	ldi	r30, 0xA0	; 160
     67a:	f9 e0       	ldi	r31, 0x09	; 9
     67c:	80 e4       	ldi	r24, 0x40	; 64
     67e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     680:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     682:	be 01       	movw	r22, r28
     684:	6f 5f       	subi	r22, 0xFF	; 255
     686:	7f 4f       	sbci	r23, 0xFF	; 255
     688:	80 ea       	ldi	r24, 0xA0	; 160
     68a:	99 e0       	ldi	r25, 0x09	; 9
     68c:	84 d6       	rcall	.+3336   	; 0x1396 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     68e:	8b e2       	ldi	r24, 0x2B	; 43
     690:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     692:	be 01       	movw	r22, r28
     694:	6f 5f       	subi	r22, 0xFF	; 255
     696:	7f 4f       	sbci	r23, 0xFF	; 255
     698:	80 ea       	ldi	r24, 0xA0	; 160
     69a:	99 e0       	ldi	r25, 0x09	; 9
     69c:	66 d6       	rcall	.+3276   	; 0x136a <usart_spi_select_device>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	e0 e6       	ldi	r30, 0x60	; 96
     6a2:	f6 e0       	ldi	r31, 0x06	; 6
     6a4:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6a6:	e0 ea       	ldi	r30, 0xA0	; 160
     6a8:	f9 e0       	ldi	r31, 0x09	; 9
     6aa:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6ac:	85 ff       	sbrs	r24, 5
     6ae:	fd cf       	rjmp	.-6      	; 0x6aa <st7565r_init+0x1d8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6b0:	88 ef       	ldi	r24, 0xF8	; 248
     6b2:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6b6:	e0 ea       	ldi	r30, 0xA0	; 160
     6b8:	f9 e0       	ldi	r31, 0x09	; 9
     6ba:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6bc:	86 ff       	sbrs	r24, 6
     6be:	fd cf       	rjmp	.-6      	; 0x6ba <st7565r_init+0x1e8>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6c0:	e0 ea       	ldi	r30, 0xA0	; 160
     6c2:	f9 e0       	ldi	r31, 0x09	; 9
     6c4:	80 e4       	ldi	r24, 0x40	; 64
     6c6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6c8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6ca:	be 01       	movw	r22, r28
     6cc:	6f 5f       	subi	r22, 0xFF	; 255
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	80 ea       	ldi	r24, 0xA0	; 160
     6d2:	99 e0       	ldi	r25, 0x09	; 9
     6d4:	60 d6       	rcall	.+3264   	; 0x1396 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6d6:	8b e2       	ldi	r24, 0x2B	; 43
     6d8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6da:	be 01       	movw	r22, r28
     6dc:	6f 5f       	subi	r22, 0xFF	; 255
     6de:	7f 4f       	sbci	r23, 0xFF	; 255
     6e0:	80 ea       	ldi	r24, 0xA0	; 160
     6e2:	99 e0       	ldi	r25, 0x09	; 9
     6e4:	42 d6       	rcall	.+3204   	; 0x136a <usart_spi_select_device>
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	e0 e6       	ldi	r30, 0x60	; 96
     6ea:	f6 e0       	ldi	r31, 0x06	; 6
     6ec:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6ee:	e0 ea       	ldi	r30, 0xA0	; 160
     6f0:	f9 e0       	ldi	r31, 0x09	; 9
     6f2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6f4:	85 ff       	sbrs	r24, 5
     6f6:	fd cf       	rjmp	.-6      	; 0x6f2 <st7565r_init+0x220>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6f8:	10 92 a0 09 	sts	0x09A0, r1
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6fc:	e0 ea       	ldi	r30, 0xA0	; 160
     6fe:	f9 e0       	ldi	r31, 0x09	; 9
     700:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     702:	86 ff       	sbrs	r24, 6
     704:	fd cf       	rjmp	.-6      	; 0x700 <st7565r_init+0x22e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     706:	e0 ea       	ldi	r30, 0xA0	; 160
     708:	f9 e0       	ldi	r31, 0x09	; 9
     70a:	80 e4       	ldi	r24, 0x40	; 64
     70c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     70e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     710:	be 01       	movw	r22, r28
     712:	6f 5f       	subi	r22, 0xFF	; 255
     714:	7f 4f       	sbci	r23, 0xFF	; 255
     716:	80 ea       	ldi	r24, 0xA0	; 160
     718:	99 e0       	ldi	r25, 0x09	; 9
     71a:	3d d6       	rcall	.+3194   	; 0x1396 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     71c:	8b e2       	ldi	r24, 0x2B	; 43
     71e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     720:	be 01       	movw	r22, r28
     722:	6f 5f       	subi	r22, 0xFF	; 255
     724:	7f 4f       	sbci	r23, 0xFF	; 255
     726:	80 ea       	ldi	r24, 0xA0	; 160
     728:	99 e0       	ldi	r25, 0x09	; 9
     72a:	1f d6       	rcall	.+3134   	; 0x136a <usart_spi_select_device>
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	e0 e6       	ldi	r30, 0x60	; 96
     730:	f6 e0       	ldi	r31, 0x06	; 6
     732:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     734:	e0 ea       	ldi	r30, 0xA0	; 160
     736:	f9 e0       	ldi	r31, 0x09	; 9
     738:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     73a:	85 ff       	sbrs	r24, 5
     73c:	fd cf       	rjmp	.-6      	; 0x738 <st7565r_init+0x266>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     73e:	81 e2       	ldi	r24, 0x21	; 33
     740:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     744:	e0 ea       	ldi	r30, 0xA0	; 160
     746:	f9 e0       	ldi	r31, 0x09	; 9
     748:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     74a:	86 ff       	sbrs	r24, 6
     74c:	fd cf       	rjmp	.-6      	; 0x748 <st7565r_init+0x276>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     74e:	e0 ea       	ldi	r30, 0xA0	; 160
     750:	f9 e0       	ldi	r31, 0x09	; 9
     752:	80 e4       	ldi	r24, 0x40	; 64
     754:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     756:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     758:	be 01       	movw	r22, r28
     75a:	6f 5f       	subi	r22, 0xFF	; 255
     75c:	7f 4f       	sbci	r23, 0xFF	; 255
     75e:	80 ea       	ldi	r24, 0xA0	; 160
     760:	99 e0       	ldi	r25, 0x09	; 9
     762:	19 d6       	rcall	.+3122   	; 0x1396 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     764:	8b e2       	ldi	r24, 0x2B	; 43
     766:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     768:	be 01       	movw	r22, r28
     76a:	6f 5f       	subi	r22, 0xFF	; 255
     76c:	7f 4f       	sbci	r23, 0xFF	; 255
     76e:	80 ea       	ldi	r24, 0xA0	; 160
     770:	99 e0       	ldi	r25, 0x09	; 9
     772:	fb d5       	rcall	.+3062   	; 0x136a <usart_spi_select_device>
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	e0 e6       	ldi	r30, 0x60	; 96
     778:	f6 e0       	ldi	r31, 0x06	; 6
     77a:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     77c:	e0 ea       	ldi	r30, 0xA0	; 160
     77e:	f9 e0       	ldi	r31, 0x09	; 9
     780:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     782:	85 ff       	sbrs	r24, 5
     784:	fd cf       	rjmp	.-6      	; 0x780 <st7565r_init+0x2ae>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     786:	81 e8       	ldi	r24, 0x81	; 129
     788:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     78c:	e0 ea       	ldi	r30, 0xA0	; 160
     78e:	f9 e0       	ldi	r31, 0x09	; 9
     790:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     792:	86 ff       	sbrs	r24, 6
     794:	fd cf       	rjmp	.-6      	; 0x790 <st7565r_init+0x2be>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     796:	e0 ea       	ldi	r30, 0xA0	; 160
     798:	f9 e0       	ldi	r31, 0x09	; 9
     79a:	80 e4       	ldi	r24, 0x40	; 64
     79c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     79e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7a0:	be 01       	movw	r22, r28
     7a2:	6f 5f       	subi	r22, 0xFF	; 255
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	80 ea       	ldi	r24, 0xA0	; 160
     7a8:	99 e0       	ldi	r25, 0x09	; 9
     7aa:	f5 d5       	rcall	.+3050   	; 0x1396 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7ac:	8b e2       	ldi	r24, 0x2B	; 43
     7ae:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7b0:	be 01       	movw	r22, r28
     7b2:	6f 5f       	subi	r22, 0xFF	; 255
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	80 ea       	ldi	r24, 0xA0	; 160
     7b8:	99 e0       	ldi	r25, 0x09	; 9
     7ba:	d7 d5       	rcall	.+2990   	; 0x136a <usart_spi_select_device>
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	e0 e6       	ldi	r30, 0x60	; 96
     7c0:	f6 e0       	ldi	r31, 0x06	; 6
     7c2:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7c4:	e0 ea       	ldi	r30, 0xA0	; 160
     7c6:	f9 e0       	ldi	r31, 0x09	; 9
     7c8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7ca:	85 ff       	sbrs	r24, 5
     7cc:	fd cf       	rjmp	.-6      	; 0x7c8 <st7565r_init+0x2f6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ce:	81 e2       	ldi	r24, 0x21	; 33
     7d0:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7d4:	e0 ea       	ldi	r30, 0xA0	; 160
     7d6:	f9 e0       	ldi	r31, 0x09	; 9
     7d8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7da:	86 ff       	sbrs	r24, 6
     7dc:	fd cf       	rjmp	.-6      	; 0x7d8 <st7565r_init+0x306>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7de:	e0 ea       	ldi	r30, 0xA0	; 160
     7e0:	f9 e0       	ldi	r31, 0x09	; 9
     7e2:	80 e4       	ldi	r24, 0x40	; 64
     7e4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7e6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7e8:	be 01       	movw	r22, r28
     7ea:	6f 5f       	subi	r22, 0xFF	; 255
     7ec:	7f 4f       	sbci	r23, 0xFF	; 255
     7ee:	80 ea       	ldi	r24, 0xA0	; 160
     7f0:	99 e0       	ldi	r25, 0x09	; 9
     7f2:	d1 d5       	rcall	.+2978   	; 0x1396 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7f4:	8b e2       	ldi	r24, 0x2B	; 43
     7f6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7f8:	be 01       	movw	r22, r28
     7fa:	6f 5f       	subi	r22, 0xFF	; 255
     7fc:	7f 4f       	sbci	r23, 0xFF	; 255
     7fe:	80 ea       	ldi	r24, 0xA0	; 160
     800:	99 e0       	ldi	r25, 0x09	; 9
     802:	b3 d5       	rcall	.+2918   	; 0x136a <usart_spi_select_device>
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	e0 e6       	ldi	r30, 0x60	; 96
     808:	f6 e0       	ldi	r31, 0x06	; 6
     80a:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     80c:	e0 ea       	ldi	r30, 0xA0	; 160
     80e:	f9 e0       	ldi	r31, 0x09	; 9
     810:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     812:	85 ff       	sbrs	r24, 5
     814:	fd cf       	rjmp	.-6      	; 0x810 <st7565r_init+0x33e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     816:	8f ea       	ldi	r24, 0xAF	; 175
     818:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     81c:	e0 ea       	ldi	r30, 0xA0	; 160
     81e:	f9 e0       	ldi	r31, 0x09	; 9
     820:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     822:	86 ff       	sbrs	r24, 6
     824:	fd cf       	rjmp	.-6      	; 0x820 <st7565r_init+0x34e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     826:	e0 ea       	ldi	r30, 0xA0	; 160
     828:	f9 e0       	ldi	r31, 0x09	; 9
     82a:	80 e4       	ldi	r24, 0x40	; 64
     82c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     82e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     830:	be 01       	movw	r22, r28
     832:	6f 5f       	subi	r22, 0xFF	; 255
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	80 ea       	ldi	r24, 0xA0	; 160
     838:	99 e0       	ldi	r25, 0x09	; 9
     83a:	ad d5       	rcall	.+2906   	; 0x1396 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     83c:	0f 90       	pop	r0
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	df 90       	pop	r13
     84c:	cf 90       	pop	r12
     84e:	bf 90       	pop	r11
     850:	08 95       	ret

00000852 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	1f 92       	push	r1
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	f8 2e       	mov	r15, r24
     864:	06 2f       	mov	r16, r22
     866:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     868:	b1 d5       	rcall	.+2914   	; 0x13cc <gfx_mono_framebuffer_put_byte>
 * \param address the page address
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
     86a:	8f 2d       	mov	r24, r15
     86c:	8f 70       	andi	r24, 0x0F	; 15
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     86e:	80 6b       	ori	r24, 0xB0	; 176
     870:	f8 2e       	mov	r15, r24
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     872:	8b e2       	ldi	r24, 0x2B	; 43
     874:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     876:	be 01       	movw	r22, r28
     878:	6f 5f       	subi	r22, 0xFF	; 255
     87a:	7f 4f       	sbci	r23, 0xFF	; 255
     87c:	80 ea       	ldi	r24, 0xA0	; 160
     87e:	99 e0       	ldi	r25, 0x09	; 9
     880:	74 d5       	rcall	.+2792   	; 0x136a <usart_spi_select_device>
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	e0 e6       	ldi	r30, 0x60	; 96
     886:	f6 e0       	ldi	r31, 0x06	; 6
     888:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     88a:	e0 ea       	ldi	r30, 0xA0	; 160
     88c:	f9 e0       	ldi	r31, 0x09	; 9
     88e:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     890:	95 ff       	sbrs	r25, 5
     892:	fd cf       	rjmp	.-6      	; 0x88e <gfx_mono_st7565r_put_byte+0x3c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     894:	f0 92 a0 09 	sts	0x09A0, r15
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     898:	e0 ea       	ldi	r30, 0xA0	; 160
     89a:	f9 e0       	ldi	r31, 0x09	; 9
     89c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     89e:	86 ff       	sbrs	r24, 6
     8a0:	fd cf       	rjmp	.-6      	; 0x89c <gfx_mono_st7565r_put_byte+0x4a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8a2:	e0 ea       	ldi	r30, 0xA0	; 160
     8a4:	f9 e0       	ldi	r31, 0x09	; 9
     8a6:	80 e4       	ldi	r24, 0x40	; 64
     8a8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8aa:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8ac:	be 01       	movw	r22, r28
     8ae:	6f 5f       	subi	r22, 0xFF	; 255
     8b0:	7f 4f       	sbci	r23, 0xFF	; 255
     8b2:	80 ea       	ldi	r24, 0xA0	; 160
     8b4:	99 e0       	ldi	r25, 0x09	; 9
     8b6:	6f d5       	rcall	.+2782   	; 0x1396 <usart_spi_deselect_device>
 * \param address the column address
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
     8b8:	80 2f       	mov	r24, r16
     8ba:	8f 77       	andi	r24, 0x7F	; 127
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     8bc:	82 95       	swap	r24
     8be:	8f 70       	andi	r24, 0x0F	; 15
     8c0:	80 61       	ori	r24, 0x10	; 16
     8c2:	f8 2e       	mov	r15, r24
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8c4:	8b e2       	ldi	r24, 0x2B	; 43
     8c6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8c8:	be 01       	movw	r22, r28
     8ca:	6f 5f       	subi	r22, 0xFF	; 255
     8cc:	7f 4f       	sbci	r23, 0xFF	; 255
     8ce:	80 ea       	ldi	r24, 0xA0	; 160
     8d0:	99 e0       	ldi	r25, 0x09	; 9
     8d2:	4b d5       	rcall	.+2710   	; 0x136a <usart_spi_select_device>
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	e0 e6       	ldi	r30, 0x60	; 96
     8d8:	f6 e0       	ldi	r31, 0x06	; 6
     8da:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8dc:	e0 ea       	ldi	r30, 0xA0	; 160
     8de:	f9 e0       	ldi	r31, 0x09	; 9
     8e0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8e2:	85 ff       	sbrs	r24, 5
     8e4:	fd cf       	rjmp	.-6      	; 0x8e0 <gfx_mono_st7565r_put_byte+0x8e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8e6:	f0 92 a0 09 	sts	0x09A0, r15
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8ea:	e0 ea       	ldi	r30, 0xA0	; 160
     8ec:	f9 e0       	ldi	r31, 0x09	; 9
     8ee:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8f0:	86 ff       	sbrs	r24, 6
     8f2:	fd cf       	rjmp	.-6      	; 0x8ee <gfx_mono_st7565r_put_byte+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8f4:	e0 ea       	ldi	r30, 0xA0	; 160
     8f6:	f9 e0       	ldi	r31, 0x09	; 9
     8f8:	80 e4       	ldi	r24, 0x40	; 64
     8fa:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8fc:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8fe:	be 01       	movw	r22, r28
     900:	6f 5f       	subi	r22, 0xFF	; 255
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	80 ea       	ldi	r24, 0xA0	; 160
     906:	99 e0       	ldi	r25, 0x09	; 9
     908:	46 d5       	rcall	.+2700   	; 0x1396 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     90a:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     90c:	8b e2       	ldi	r24, 0x2B	; 43
     90e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     910:	be 01       	movw	r22, r28
     912:	6f 5f       	subi	r22, 0xFF	; 255
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	80 ea       	ldi	r24, 0xA0	; 160
     918:	99 e0       	ldi	r25, 0x09	; 9
     91a:	27 d5       	rcall	.+2638   	; 0x136a <usart_spi_select_device>
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	e0 e6       	ldi	r30, 0x60	; 96
     920:	f6 e0       	ldi	r31, 0x06	; 6
     922:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     924:	e0 ea       	ldi	r30, 0xA0	; 160
     926:	f9 e0       	ldi	r31, 0x09	; 9
     928:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     92a:	85 ff       	sbrs	r24, 5
     92c:	fd cf       	rjmp	.-6      	; 0x928 <gfx_mono_st7565r_put_byte+0xd6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     92e:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     932:	e0 ea       	ldi	r30, 0xA0	; 160
     934:	f9 e0       	ldi	r31, 0x09	; 9
     936:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     938:	86 ff       	sbrs	r24, 6
     93a:	fd cf       	rjmp	.-6      	; 0x936 <gfx_mono_st7565r_put_byte+0xe4>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     93c:	e0 ea       	ldi	r30, 0xA0	; 160
     93e:	f9 e0       	ldi	r31, 0x09	; 9
     940:	80 e4       	ldi	r24, 0x40	; 64
     942:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     944:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     946:	be 01       	movw	r22, r28
     948:	6f 5f       	subi	r22, 0xFF	; 255
     94a:	7f 4f       	sbci	r23, 0xFF	; 255
     94c:	80 ea       	ldi	r24, 0xA0	; 160
     94e:	99 e0       	ldi	r25, 0x09	; 9
     950:	22 d5       	rcall	.+2628   	; 0x1396 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     952:	8b e2       	ldi	r24, 0x2B	; 43
     954:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     956:	be 01       	movw	r22, r28
     958:	6f 5f       	subi	r22, 0xFF	; 255
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	80 ea       	ldi	r24, 0xA0	; 160
     95e:	99 e0       	ldi	r25, 0x09	; 9
     960:	04 d5       	rcall	.+2568   	; 0x136a <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	e0 e6       	ldi	r30, 0x60	; 96
     966:	f6 e0       	ldi	r31, 0x06	; 6
     968:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     96a:	e0 ea       	ldi	r30, 0xA0	; 160
     96c:	f9 e0       	ldi	r31, 0x09	; 9
     96e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     970:	85 ff       	sbrs	r24, 5
     972:	fd cf       	rjmp	.-6      	; 0x96e <gfx_mono_st7565r_put_byte+0x11c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     974:	10 93 a0 09 	sts	0x09A0, r17
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     978:	e0 ea       	ldi	r30, 0xA0	; 160
     97a:	f9 e0       	ldi	r31, 0x09	; 9
     97c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     97e:	86 ff       	sbrs	r24, 6
     980:	fd cf       	rjmp	.-6      	; 0x97c <gfx_mono_st7565r_put_byte+0x12a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     982:	e0 ea       	ldi	r30, 0xA0	; 160
     984:	f9 e0       	ldi	r31, 0x09	; 9
     986:	80 e4       	ldi	r24, 0x40	; 64
     988:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     98a:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	e0 e6       	ldi	r30, 0x60	; 96
     990:	f6 e0       	ldi	r31, 0x06	; 6
     992:	86 83       	std	Z+6, r24	; 0x06
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     994:	be 01       	movw	r22, r28
     996:	6f 5f       	subi	r22, 0xFF	; 255
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	80 ea       	ldi	r24, 0xA0	; 160
     99c:	99 e0       	ldi	r25, 0x09	; 9
     99e:	fb d4       	rcall	.+2550   	; 0x1396 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9a0:	0f 90       	pop	r0
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	08 95       	ret

000009ae <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	1f 92       	push	r1
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     9bc:	8c ec       	ldi	r24, 0xCC	; 204
     9be:	90 e2       	ldi	r25, 0x20	; 32
     9c0:	00 d5       	rcall	.+2560   	; 0x13c2 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     9c2:	87 dd       	rcall	.-1266   	; 0x4d2 <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9c4:	8b e2       	ldi	r24, 0x2B	; 43
     9c6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9c8:	be 01       	movw	r22, r28
     9ca:	6f 5f       	subi	r22, 0xFF	; 255
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	80 ea       	ldi	r24, 0xA0	; 160
     9d0:	99 e0       	ldi	r25, 0x09	; 9
     9d2:	cb d4       	rcall	.+2454   	; 0x136a <usart_spi_select_device>
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	e0 e6       	ldi	r30, 0x60	; 96
     9d8:	f6 e0       	ldi	r31, 0x06	; 6
     9da:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9dc:	e0 ea       	ldi	r30, 0xA0	; 160
     9de:	f9 e0       	ldi	r31, 0x09	; 9
     9e0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9e2:	85 ff       	sbrs	r24, 5
     9e4:	fd cf       	rjmp	.-6      	; 0x9e0 <gfx_mono_st7565r_init+0x32>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9e6:	80 e4       	ldi	r24, 0x40	; 64
     9e8:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9ec:	e0 ea       	ldi	r30, 0xA0	; 160
     9ee:	f9 e0       	ldi	r31, 0x09	; 9
     9f0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9f2:	86 ff       	sbrs	r24, 6
     9f4:	fd cf       	rjmp	.-6      	; 0x9f0 <gfx_mono_st7565r_init+0x42>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9f6:	e0 ea       	ldi	r30, 0xA0	; 160
     9f8:	f9 e0       	ldi	r31, 0x09	; 9
     9fa:	80 e4       	ldi	r24, 0x40	; 64
     9fc:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9fe:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a00:	be 01       	movw	r22, r28
     a02:	6f 5f       	subi	r22, 0xFF	; 255
     a04:	7f 4f       	sbci	r23, 0xFF	; 255
     a06:	80 ea       	ldi	r24, 0xA0	; 160
     a08:	99 e0       	ldi	r25, 0x09	; 9
     a0a:	c5 d4       	rcall	.+2442   	; 0x1396 <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a0c:	00 e0       	ldi	r16, 0x00	; 0
     a0e:	0a c0       	rjmp	.+20     	; 0xa24 <gfx_mono_st7565r_init+0x76>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	61 2f       	mov	r22, r17
     a14:	80 2f       	mov	r24, r16
     a16:	1d df       	rcall	.-454    	; 0x852 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a18:	1f 5f       	subi	r17, 0xFF	; 255
     a1a:	10 38       	cpi	r17, 0x80	; 128
     a1c:	c9 f7       	brne	.-14     	; 0xa10 <gfx_mono_st7565r_init+0x62>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a1e:	0f 5f       	subi	r16, 0xFF	; 255
     a20:	04 30       	cpi	r16, 0x04	; 4
     a22:	11 f0       	breq	.+4      	; 0xa28 <gfx_mono_st7565r_init+0x7a>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a24:	10 e0       	ldi	r17, 0x00	; 0
     a26:	f4 cf       	rjmp	.-24     	; 0xa10 <gfx_mono_st7565r_init+0x62>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a28:	0f 90       	pop	r0
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	08 95       	ret

00000a34 <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	18 2f       	mov	r17, r24
     a40:	04 2f       	mov	r16, r20
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a42:	88 23       	and	r24, r24
     a44:	74 f1       	brlt	.+92     	; 0xaa2 <gfx_mono_st7565r_draw_pixel+0x6e>
     a46:	60 32       	cpi	r22, 0x20	; 32
     a48:	60 f5       	brcc	.+88     	; 0xaa2 <gfx_mono_st7565r_draw_pixel+0x6e>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a4a:	f6 2e       	mov	r15, r22
     a4c:	f6 94       	lsr	r15
     a4e:	f6 94       	lsr	r15
     a50:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     a52:	2f 2d       	mov	r18, r15
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	31 95       	neg	r19
     a58:	21 95       	neg	r18
     a5a:	31 09       	sbc	r19, r1
     a5c:	22 0f       	add	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	22 0f       	add	r18, r18
     a62:	33 1f       	adc	r19, r19
     a64:	22 0f       	add	r18, r18
     a66:	33 1f       	adc	r19, r19
     a68:	26 0f       	add	r18, r22
     a6a:	31 1d       	adc	r19, r1
     a6c:	e1 e0       	ldi	r30, 0x01	; 1
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	ef 01       	movw	r28, r30
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <gfx_mono_st7565r_draw_pixel+0x44>
     a74:	cc 0f       	add	r28, r28
     a76:	dd 1f       	adc	r29, r29
     a78:	2a 95       	dec	r18
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <gfx_mono_st7565r_draw_pixel+0x40>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     a7c:	68 2f       	mov	r22, r24
     a7e:	8f 2d       	mov	r24, r15
     a80:	b4 d4       	rcall	.+2408   	; 0x13ea <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     a82:	01 30       	cpi	r16, 0x01	; 1
     a84:	21 f0       	breq	.+8      	; 0xa8e <gfx_mono_st7565r_draw_pixel+0x5a>
     a86:	28 f0       	brcs	.+10     	; 0xa92 <gfx_mono_st7565r_draw_pixel+0x5e>
     a88:	02 30       	cpi	r16, 0x02	; 2
     a8a:	31 f0       	breq	.+12     	; 0xa98 <gfx_mono_st7565r_draw_pixel+0x64>
     a8c:	06 c0       	rjmp	.+12     	; 0xa9a <gfx_mono_st7565r_draw_pixel+0x66>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     a8e:	8c 2b       	or	r24, r28
		break;
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <gfx_mono_st7565r_draw_pixel+0x66>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     a92:	c0 95       	com	r28
     a94:	8c 23       	and	r24, r28
		break;
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <gfx_mono_st7565r_draw_pixel+0x66>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     a98:	8c 27       	eor	r24, r28

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     a9a:	48 2f       	mov	r20, r24
     a9c:	61 2f       	mov	r22, r17
     a9e:	8f 2d       	mov	r24, r15
     aa0:	d8 de       	rcall	.-592    	; 0x852 <gfx_mono_st7565r_put_byte>
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	08 95       	ret

00000aae <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     aae:	9d c4       	rjmp	.+2362   	; 0x13ea <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     ab0:	08 95       	ret

00000ab2 <usart_getchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     ab2:	fc 01       	movw	r30, r24
     ab4:	81 81       	ldd	r24, Z+1	; 0x01
     ab6:	88 23       	and	r24, r24
     ab8:	ec f7       	brge	.-6      	; 0xab4 <usart_getchar+0x2>
     aba:	80 81       	ld	r24, Z
     abc:	08 95       	ret

00000abe <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     abe:	4f 92       	push	r4
     ac0:	5f 92       	push	r5
     ac2:	6f 92       	push	r6
     ac4:	7f 92       	push	r7
     ac6:	8f 92       	push	r8
     ac8:	9f 92       	push	r9
     aca:	af 92       	push	r10
     acc:	bf 92       	push	r11
     ace:	cf 92       	push	r12
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	ec 01       	movw	r28, r24
     ae0:	4a 01       	movw	r8, r20
     ae2:	5b 01       	movw	r10, r22
     ae4:	28 01       	movw	r4, r16
     ae6:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     ae8:	d9 01       	movw	r26, r18
     aea:	c8 01       	movw	r24, r16
     aec:	68 94       	set
     aee:	12 f8       	bld	r1, 2
     af0:	b6 95       	lsr	r27
     af2:	a7 95       	ror	r26
     af4:	97 95       	ror	r25
     af6:	87 95       	ror	r24
     af8:	16 94       	lsr	r1
     afa:	d1 f7       	brne	.-12     	; 0xaf0 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     afc:	b9 01       	movw	r22, r18
     afe:	a8 01       	movw	r20, r16
     b00:	03 2e       	mov	r0, r19
     b02:	36 e1       	ldi	r19, 0x16	; 22
     b04:	76 95       	lsr	r23
     b06:	67 95       	ror	r22
     b08:	57 95       	ror	r21
     b0a:	47 95       	ror	r20
     b0c:	3a 95       	dec	r19
     b0e:	d1 f7       	brne	.-12     	; 0xb04 <usart_set_baudrate+0x46>
     b10:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     b12:	2c 81       	ldd	r18, Y+4	; 0x04
     b14:	22 fd       	sbrc	r18, 2
     b16:	08 c0       	rjmp	.+16     	; 0xb28 <usart_set_baudrate+0x6a>
		max_rate /= 2;
     b18:	b6 95       	lsr	r27
     b1a:	a7 95       	ror	r26
     b1c:	97 95       	ror	r25
     b1e:	87 95       	ror	r24
		min_rate /= 2;
     b20:	76 95       	lsr	r23
     b22:	67 95       	ror	r22
     b24:	57 95       	ror	r21
     b26:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     b28:	88 15       	cp	r24, r8
     b2a:	99 05       	cpc	r25, r9
     b2c:	aa 05       	cpc	r26, r10
     b2e:	bb 05       	cpc	r27, r11
     b30:	08 f4       	brcc	.+2      	; 0xb34 <usart_set_baudrate+0x76>
     b32:	a2 c0       	rjmp	.+324    	; 0xc78 <usart_set_baudrate+0x1ba>
     b34:	84 16       	cp	r8, r20
     b36:	95 06       	cpc	r9, r21
     b38:	a6 06       	cpc	r10, r22
     b3a:	b7 06       	cpc	r11, r23
     b3c:	08 f4       	brcc	.+2      	; 0xb40 <usart_set_baudrate+0x82>
     b3e:	9e c0       	rjmp	.+316    	; 0xc7c <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     b40:	8c 81       	ldd	r24, Y+4	; 0x04
     b42:	82 fd       	sbrc	r24, 2
     b44:	04 c0       	rjmp	.+8      	; 0xb4e <usart_set_baudrate+0x90>
		baud *= 2;
     b46:	88 0c       	add	r8, r8
     b48:	99 1c       	adc	r9, r9
     b4a:	aa 1c       	adc	r10, r10
     b4c:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     b4e:	c3 01       	movw	r24, r6
     b50:	b2 01       	movw	r22, r4
     b52:	a5 01       	movw	r20, r10
     b54:	94 01       	movw	r18, r8
     b56:	f4 d6       	rcall	.+3560   	; 0x1940 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     b58:	2f 3f       	cpi	r18, 0xFF	; 255
     b5a:	31 05       	cpc	r19, r1
     b5c:	41 05       	cpc	r20, r1
     b5e:	51 05       	cpc	r21, r1
     b60:	08 f4       	brcc	.+2      	; 0xb64 <usart_set_baudrate+0xa6>
     b62:	8e c0       	rjmp	.+284    	; 0xc80 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     b64:	c1 2c       	mov	r12, r1
     b66:	d1 2c       	mov	r13, r1
     b68:	76 01       	movw	r14, r12
     b6a:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     b6c:	19 ef       	ldi	r17, 0xF9	; 249
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <usart_set_baudrate+0xbc>
		if (ratio < limit) {
     b70:	2c 15       	cp	r18, r12
     b72:	3d 05       	cpc	r19, r13
     b74:	4e 05       	cpc	r20, r14
     b76:	5f 05       	cpc	r21, r15
     b78:	68 f0       	brcs	.+26     	; 0xb94 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
     b7a:	cc 0c       	add	r12, r12
     b7c:	dd 1c       	adc	r13, r13
     b7e:	ee 1c       	adc	r14, r14
     b80:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     b82:	1d 3f       	cpi	r17, 0xFD	; 253
     b84:	14 f4       	brge	.+4      	; 0xb8a <usart_set_baudrate+0xcc>
			limit |= 1;
     b86:	68 94       	set
     b88:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     b8a:	1f 5f       	subi	r17, 0xFF	; 255
     b8c:	17 30       	cpi	r17, 0x07	; 7
     b8e:	81 f7       	brne	.-32     	; 0xb70 <usart_set_baudrate+0xb2>
     b90:	21 2f       	mov	r18, r17
     b92:	4e c0       	rjmp	.+156    	; 0xc30 <usart_set_baudrate+0x172>
     b94:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     b96:	11 23       	and	r17, r17
     b98:	0c f0       	brlt	.+2      	; 0xb9c <usart_set_baudrate+0xde>
     b9a:	4a c0       	rjmp	.+148    	; 0xc30 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     b9c:	d5 01       	movw	r26, r10
     b9e:	c4 01       	movw	r24, r8
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	aa 1f       	adc	r26, r26
     bae:	bb 1f       	adc	r27, r27
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	aa 1f       	adc	r26, r26
     bb6:	bb 1f       	adc	r27, r27
     bb8:	48 1a       	sub	r4, r24
     bba:	59 0a       	sbc	r5, r25
     bbc:	6a 0a       	sbc	r6, r26
     bbe:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     bc0:	1e 3f       	cpi	r17, 0xFE	; 254
     bc2:	ec f4       	brge	.+58     	; 0xbfe <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     bc4:	6d ef       	ldi	r22, 0xFD	; 253
     bc6:	7f ef       	ldi	r23, 0xFF	; 255
     bc8:	61 1b       	sub	r22, r17
     bca:	71 09       	sbc	r23, r1
     bcc:	17 fd       	sbrc	r17, 7
     bce:	73 95       	inc	r23
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <usart_set_baudrate+0x11c>
     bd2:	44 0c       	add	r4, r4
     bd4:	55 1c       	adc	r5, r5
     bd6:	66 1c       	adc	r6, r6
     bd8:	77 1c       	adc	r7, r7
     bda:	6a 95       	dec	r22
     bdc:	d2 f7       	brpl	.-12     	; 0xbd2 <usart_set_baudrate+0x114>
     bde:	d5 01       	movw	r26, r10
     be0:	c4 01       	movw	r24, r8
     be2:	b6 95       	lsr	r27
     be4:	a7 95       	ror	r26
     be6:	97 95       	ror	r25
     be8:	87 95       	ror	r24
     bea:	bc 01       	movw	r22, r24
     bec:	cd 01       	movw	r24, r26
     bee:	64 0d       	add	r22, r4
     bf0:	75 1d       	adc	r23, r5
     bf2:	86 1d       	adc	r24, r6
     bf4:	97 1d       	adc	r25, r7
     bf6:	a5 01       	movw	r20, r10
     bf8:	94 01       	movw	r18, r8
     bfa:	a2 d6       	rcall	.+3396   	; 0x1940 <__udivmodsi4>
     bfc:	34 c0       	rjmp	.+104    	; 0xc66 <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
     bfe:	23 e0       	ldi	r18, 0x03	; 3
     c00:	21 0f       	add	r18, r17
     c02:	d5 01       	movw	r26, r10
     c04:	c4 01       	movw	r24, r8
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <usart_set_baudrate+0x152>
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	aa 1f       	adc	r26, r26
     c0e:	bb 1f       	adc	r27, r27
     c10:	2a 95       	dec	r18
     c12:	d2 f7       	brpl	.-12     	; 0xc08 <usart_set_baudrate+0x14a>
     c14:	9c 01       	movw	r18, r24
     c16:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     c18:	b6 95       	lsr	r27
     c1a:	a7 95       	ror	r26
     c1c:	97 95       	ror	r25
     c1e:	87 95       	ror	r24
     c20:	bc 01       	movw	r22, r24
     c22:	cd 01       	movw	r24, r26
     c24:	64 0d       	add	r22, r4
     c26:	75 1d       	adc	r23, r5
     c28:	86 1d       	adc	r24, r6
     c2a:	97 1d       	adc	r25, r7
     c2c:	89 d6       	rcall	.+3346   	; 0x1940 <__udivmodsi4>
     c2e:	1b c0       	rjmp	.+54     	; 0xc66 <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     c30:	2d 5f       	subi	r18, 0xFD	; 253
     c32:	d5 01       	movw	r26, r10
     c34:	c4 01       	movw	r24, r8
     c36:	04 c0       	rjmp	.+8      	; 0xc40 <usart_set_baudrate+0x182>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	aa 1f       	adc	r26, r26
     c3e:	bb 1f       	adc	r27, r27
     c40:	2a 95       	dec	r18
     c42:	d2 f7       	brpl	.-12     	; 0xc38 <usart_set_baudrate+0x17a>
     c44:	9c 01       	movw	r18, r24
     c46:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     c48:	b6 95       	lsr	r27
     c4a:	a7 95       	ror	r26
     c4c:	97 95       	ror	r25
     c4e:	87 95       	ror	r24
     c50:	bc 01       	movw	r22, r24
     c52:	cd 01       	movw	r24, r26
     c54:	64 0d       	add	r22, r4
     c56:	75 1d       	adc	r23, r5
     c58:	86 1d       	adc	r24, r6
     c5a:	97 1d       	adc	r25, r7
     c5c:	71 d6       	rcall	.+3298   	; 0x1940 <__udivmodsi4>
     c5e:	21 50       	subi	r18, 0x01	; 1
     c60:	31 09       	sbc	r19, r1
     c62:	41 09       	sbc	r20, r1
     c64:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     c66:	83 2f       	mov	r24, r19
     c68:	8f 70       	andi	r24, 0x0F	; 15
     c6a:	12 95       	swap	r17
     c6c:	10 7f       	andi	r17, 0xF0	; 240
     c6e:	18 2b       	or	r17, r24
     c70:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     c72:	2e 83       	std	Y+6, r18	; 0x06

	return true;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	18 c0       	rjmp	.+48     	; 0xca8 <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	16 c0       	rjmp	.+44     	; 0xca8 <usart_set_baudrate+0x1ea>
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     c80:	d5 01       	movw	r26, r10
     c82:	c4 01       	movw	r24, r8
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	aa 1f       	adc	r26, r26
     c8a:	bb 1f       	adc	r27, r27
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	aa 1f       	adc	r26, r26
     c92:	bb 1f       	adc	r27, r27
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	aa 1f       	adc	r26, r26
     c9a:	bb 1f       	adc	r27, r27
     c9c:	48 1a       	sub	r4, r24
     c9e:	59 0a       	sbc	r5, r25
     ca0:	6a 0a       	sbc	r6, r26
     ca2:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     ca4:	19 ef       	ldi	r17, 0xF9	; 249
     ca6:	8e cf       	rjmp	.-228    	; 0xbc4 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	df 90       	pop	r13
     cb6:	cf 90       	pop	r12
     cb8:	bf 90       	pop	r11
     cba:	af 90       	pop	r10
     cbc:	9f 90       	pop	r9
     cbe:	8f 90       	pop	r8
     cc0:	7f 90       	pop	r7
     cc2:	6f 90       	pop	r6
     cc4:	5f 90       	pop	r5
     cc6:	4f 90       	pop	r4
     cc8:	08 95       	ret

00000cca <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ec 01       	movw	r28, r24
     cd4:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	09 f4       	brne	.+2      	; 0xcdc <usart_init_rs232+0x12>
     cda:	e6 c0       	rjmp	.+460    	; 0xea8 <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     cdc:	80 3c       	cpi	r24, 0xC0	; 192
     cde:	91 05       	cpc	r25, r1
     ce0:	21 f4       	brne	.+8      	; 0xcea <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     ce2:	60 e1       	ldi	r22, 0x10	; 16
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	2b d4       	rcall	.+2134   	; 0x153e <sysclk_enable_module>
     ce8:	df c0       	rjmp	.+446    	; 0xea8 <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     cea:	c0 38       	cpi	r28, 0x80	; 128
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	d8 07       	cpc	r29, r24
     cf0:	21 f4       	brne	.+8      	; 0xcfa <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     cf2:	62 e0       	ldi	r22, 0x02	; 2
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	23 d4       	rcall	.+2118   	; 0x153e <sysclk_enable_module>
     cf8:	d7 c0       	rjmp	.+430    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     cfa:	c1 15       	cp	r28, r1
     cfc:	e1 e0       	ldi	r30, 0x01	; 1
     cfe:	de 07       	cpc	r29, r30
     d00:	21 f4       	brne	.+8      	; 0xd0a <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	1b d4       	rcall	.+2102   	; 0x153e <sysclk_enable_module>
     d08:	cf c0       	rjmp	.+414    	; 0xea8 <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     d0a:	c0 38       	cpi	r28, 0x80	; 128
     d0c:	f3 e0       	ldi	r31, 0x03	; 3
     d0e:	df 07       	cpc	r29, r31
     d10:	21 f4       	brne	.+8      	; 0xd1a <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	13 d4       	rcall	.+2086   	; 0x153e <sysclk_enable_module>
     d18:	c7 c0       	rjmp	.+398    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     d1a:	c0 39       	cpi	r28, 0x90	; 144
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	d8 07       	cpc	r29, r24
     d20:	21 f4       	brne	.+8      	; 0xd2a <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	0b d4       	rcall	.+2070   	; 0x153e <sysclk_enable_module>
     d28:	bf c0       	rjmp	.+382    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     d2a:	c1 15       	cp	r28, r1
     d2c:	e2 e0       	ldi	r30, 0x02	; 2
     d2e:	de 07       	cpc	r29, r30
     d30:	21 f4       	brne	.+8      	; 0xd3a <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d32:	62 e0       	ldi	r22, 0x02	; 2
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	03 d4       	rcall	.+2054   	; 0x153e <sysclk_enable_module>
     d38:	b7 c0       	rjmp	.+366    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     d3a:	c0 34       	cpi	r28, 0x40	; 64
     d3c:	f2 e0       	ldi	r31, 0x02	; 2
     d3e:	df 07       	cpc	r29, r31
     d40:	21 f4       	brne	.+8      	; 0xd4a <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     d42:	62 e0       	ldi	r22, 0x02	; 2
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	fb d3       	rcall	.+2038   	; 0x153e <sysclk_enable_module>
     d48:	af c0       	rjmp	.+350    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     d4a:	c0 32       	cpi	r28, 0x20	; 32
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	d8 07       	cpc	r29, r24
     d50:	21 f4       	brne	.+8      	; 0xd5a <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     d52:	64 e0       	ldi	r22, 0x04	; 4
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	f3 d3       	rcall	.+2022   	; 0x153e <sysclk_enable_module>
     d58:	a7 c0       	rjmp	.+334    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     d5a:	c1 15       	cp	r28, r1
     d5c:	e8 e0       	ldi	r30, 0x08	; 8
     d5e:	de 07       	cpc	r29, r30
     d60:	21 f4       	brne	.+8      	; 0xd6a <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	eb d3       	rcall	.+2006   	; 0x153e <sysclk_enable_module>
     d68:	9f c0       	rjmp	.+318    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     d6a:	c1 15       	cp	r28, r1
     d6c:	f9 e0       	ldi	r31, 0x09	; 9
     d6e:	df 07       	cpc	r29, r31
     d70:	21 f4       	brne	.+8      	; 0xd7a <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	84 e0       	ldi	r24, 0x04	; 4
     d76:	e3 d3       	rcall	.+1990   	; 0x153e <sysclk_enable_module>
     d78:	97 c0       	rjmp	.+302    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     d7a:	c1 15       	cp	r28, r1
     d7c:	8a e0       	ldi	r24, 0x0A	; 10
     d7e:	d8 07       	cpc	r29, r24
     d80:	21 f4       	brne	.+8      	; 0xd8a <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	85 e0       	ldi	r24, 0x05	; 5
     d86:	db d3       	rcall	.+1974   	; 0x153e <sysclk_enable_module>
     d88:	8f c0       	rjmp	.+286    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     d8a:	c1 15       	cp	r28, r1
     d8c:	eb e0       	ldi	r30, 0x0B	; 11
     d8e:	de 07       	cpc	r29, r30
     d90:	21 f4       	brne	.+8      	; 0xd9a <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	86 e0       	ldi	r24, 0x06	; 6
     d96:	d3 d3       	rcall	.+1958   	; 0x153e <sysclk_enable_module>
     d98:	87 c0       	rjmp	.+270    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     d9a:	c0 34       	cpi	r28, 0x40	; 64
     d9c:	f8 e0       	ldi	r31, 0x08	; 8
     d9e:	df 07       	cpc	r29, r31
     da0:	21 f4       	brne	.+8      	; 0xdaa <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     da2:	62 e0       	ldi	r22, 0x02	; 2
     da4:	83 e0       	ldi	r24, 0x03	; 3
     da6:	cb d3       	rcall	.+1942   	; 0x153e <sysclk_enable_module>
     da8:	7f c0       	rjmp	.+254    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     daa:	c0 34       	cpi	r28, 0x40	; 64
     dac:	89 e0       	ldi	r24, 0x09	; 9
     dae:	d8 07       	cpc	r29, r24
     db0:	21 f4       	brne	.+8      	; 0xdba <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     db2:	62 e0       	ldi	r22, 0x02	; 2
     db4:	84 e0       	ldi	r24, 0x04	; 4
     db6:	c3 d3       	rcall	.+1926   	; 0x153e <sysclk_enable_module>
     db8:	77 c0       	rjmp	.+238    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     dba:	c0 34       	cpi	r28, 0x40	; 64
     dbc:	ea e0       	ldi	r30, 0x0A	; 10
     dbe:	de 07       	cpc	r29, r30
     dc0:	21 f4       	brne	.+8      	; 0xdca <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     dc2:	62 e0       	ldi	r22, 0x02	; 2
     dc4:	85 e0       	ldi	r24, 0x05	; 5
     dc6:	bb d3       	rcall	.+1910   	; 0x153e <sysclk_enable_module>
     dc8:	6f c0       	rjmp	.+222    	; 0xea8 <usart_init_rs232+0x1de>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     dca:	c0 39       	cpi	r28, 0x90	; 144
     dcc:	f8 e0       	ldi	r31, 0x08	; 8
     dce:	df 07       	cpc	r29, r31
     dd0:	21 f4       	brne	.+8      	; 0xdda <usart_init_rs232+0x110>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     dd2:	64 e0       	ldi	r22, 0x04	; 4
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	b3 d3       	rcall	.+1894   	; 0x153e <sysclk_enable_module>
     dd8:	67 c0       	rjmp	.+206    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     dda:	c0 39       	cpi	r28, 0x90	; 144
     ddc:	89 e0       	ldi	r24, 0x09	; 9
     dde:	d8 07       	cpc	r29, r24
     de0:	21 f4       	brne	.+8      	; 0xdea <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     de2:	64 e0       	ldi	r22, 0x04	; 4
     de4:	84 e0       	ldi	r24, 0x04	; 4
     de6:	ab d3       	rcall	.+1878   	; 0x153e <sysclk_enable_module>
     de8:	5f c0       	rjmp	.+190    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     dea:	c0 39       	cpi	r28, 0x90	; 144
     dec:	ea e0       	ldi	r30, 0x0A	; 10
     dee:	de 07       	cpc	r29, r30
     df0:	21 f4       	brne	.+8      	; 0xdfa <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     df2:	64 e0       	ldi	r22, 0x04	; 4
     df4:	85 e0       	ldi	r24, 0x05	; 5
     df6:	a3 d3       	rcall	.+1862   	; 0x153e <sysclk_enable_module>
     df8:	57 c0       	rjmp	.+174    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     dfa:	c0 39       	cpi	r28, 0x90	; 144
     dfc:	fb e0       	ldi	r31, 0x0B	; 11
     dfe:	df 07       	cpc	r29, r31
     e00:	21 f4       	brne	.+8      	; 0xe0a <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     e02:	64 e0       	ldi	r22, 0x04	; 4
     e04:	86 e0       	ldi	r24, 0x06	; 6
     e06:	9b d3       	rcall	.+1846   	; 0x153e <sysclk_enable_module>
     e08:	4f c0       	rjmp	.+158    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     e0a:	c0 3c       	cpi	r28, 0xC0	; 192
     e0c:	88 e0       	ldi	r24, 0x08	; 8
     e0e:	d8 07       	cpc	r29, r24
     e10:	21 f4       	brne	.+8      	; 0xe1a <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     e12:	68 e0       	ldi	r22, 0x08	; 8
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	93 d3       	rcall	.+1830   	; 0x153e <sysclk_enable_module>
     e18:	47 c0       	rjmp	.+142    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     e1a:	c0 3c       	cpi	r28, 0xC0	; 192
     e1c:	e9 e0       	ldi	r30, 0x09	; 9
     e1e:	de 07       	cpc	r29, r30
     e20:	21 f4       	brne	.+8      	; 0xe2a <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     e22:	68 e0       	ldi	r22, 0x08	; 8
     e24:	84 e0       	ldi	r24, 0x04	; 4
     e26:	8b d3       	rcall	.+1814   	; 0x153e <sysclk_enable_module>
     e28:	3f c0       	rjmp	.+126    	; 0xea8 <usart_init_rs232+0x1de>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     e2a:	c0 3a       	cpi	r28, 0xA0	; 160
     e2c:	f8 e0       	ldi	r31, 0x08	; 8
     e2e:	df 07       	cpc	r29, r31
     e30:	21 f4       	brne	.+8      	; 0xe3a <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     e32:	60 e1       	ldi	r22, 0x10	; 16
     e34:	83 e0       	ldi	r24, 0x03	; 3
     e36:	83 d3       	rcall	.+1798   	; 0x153e <sysclk_enable_module>
     e38:	37 c0       	rjmp	.+110    	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     e3a:	c0 3a       	cpi	r28, 0xA0	; 160
     e3c:	89 e0       	ldi	r24, 0x09	; 9
     e3e:	d8 07       	cpc	r29, r24
     e40:	21 f4       	brne	.+8      	; 0xe4a <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     e42:	60 e1       	ldi	r22, 0x10	; 16
     e44:	84 e0       	ldi	r24, 0x04	; 4
     e46:	7b d3       	rcall	.+1782   	; 0x153e <sysclk_enable_module>
     e48:	2f c0       	rjmp	.+94     	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     e4a:	c0 3a       	cpi	r28, 0xA0	; 160
     e4c:	ea e0       	ldi	r30, 0x0A	; 10
     e4e:	de 07       	cpc	r29, r30
     e50:	21 f4       	brne	.+8      	; 0xe5a <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     e52:	60 e1       	ldi	r22, 0x10	; 16
     e54:	85 e0       	ldi	r24, 0x05	; 5
     e56:	73 d3       	rcall	.+1766   	; 0x153e <sysclk_enable_module>
     e58:	27 c0       	rjmp	.+78     	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     e5a:	c0 3a       	cpi	r28, 0xA0	; 160
     e5c:	fb e0       	ldi	r31, 0x0B	; 11
     e5e:	df 07       	cpc	r29, r31
     e60:	21 f4       	brne	.+8      	; 0xe6a <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     e62:	60 e1       	ldi	r22, 0x10	; 16
     e64:	86 e0       	ldi	r24, 0x06	; 6
     e66:	6b d3       	rcall	.+1750   	; 0x153e <sysclk_enable_module>
     e68:	1f c0       	rjmp	.+62     	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     e6a:	c0 3b       	cpi	r28, 0xB0	; 176
     e6c:	88 e0       	ldi	r24, 0x08	; 8
     e6e:	d8 07       	cpc	r29, r24
     e70:	21 f4       	brne	.+8      	; 0xe7a <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     e72:	60 e2       	ldi	r22, 0x20	; 32
     e74:	83 e0       	ldi	r24, 0x03	; 3
     e76:	63 d3       	rcall	.+1734   	; 0x153e <sysclk_enable_module>
     e78:	17 c0       	rjmp	.+46     	; 0xea8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     e7a:	c0 3b       	cpi	r28, 0xB0	; 176
     e7c:	e9 e0       	ldi	r30, 0x09	; 9
     e7e:	de 07       	cpc	r29, r30
     e80:	21 f4       	brne	.+8      	; 0xe8a <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     e82:	60 e2       	ldi	r22, 0x20	; 32
     e84:	84 e0       	ldi	r24, 0x04	; 4
     e86:	5b d3       	rcall	.+1718   	; 0x153e <sysclk_enable_module>
     e88:	0f c0       	rjmp	.+30     	; 0xea8 <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     e8a:	c0 38       	cpi	r28, 0x80	; 128
     e8c:	f4 e0       	ldi	r31, 0x04	; 4
     e8e:	df 07       	cpc	r29, r31
     e90:	21 f4       	brne	.+8      	; 0xe9a <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     e92:	60 e4       	ldi	r22, 0x40	; 64
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	53 d3       	rcall	.+1702   	; 0x153e <sysclk_enable_module>
     e98:	07 c0       	rjmp	.+14     	; 0xea8 <usart_init_rs232+0x1de>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     e9a:	c0 3a       	cpi	r28, 0xA0	; 160
     e9c:	84 e0       	ldi	r24, 0x04	; 4
     e9e:	d8 07       	cpc	r29, r24
     ea0:	19 f4       	brne	.+6      	; 0xea8 <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     ea2:	60 e4       	ldi	r22, 0x40	; 64
     ea4:	85 e0       	ldi	r24, 0x05	; 5
     ea6:	4b d3       	rcall	.+1686   	; 0x153e <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	8f 73       	andi	r24, 0x3F	; 63
     eac:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     eae:	f8 01       	movw	r30, r16
     eb0:	94 81       	ldd	r25, Z+4	; 0x04
     eb2:	85 81       	ldd	r24, Z+5	; 0x05
     eb4:	89 2b       	or	r24, r25
     eb6:	96 81       	ldd	r25, Z+6	; 0x06
     eb8:	99 23       	and	r25, r25
     eba:	11 f0       	breq	.+4      	; 0xec0 <usart_init_rs232+0x1f6>
     ebc:	98 e0       	ldi	r25, 0x08	; 8
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <usart_init_rs232+0x1f8>
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	89 2b       	or	r24, r25
     ec4:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     ec6:	f8 01       	movw	r30, r16
     ec8:	40 81       	ld	r20, Z
     eca:	51 81       	ldd	r21, Z+1	; 0x01
     ecc:	62 81       	ldd	r22, Z+2	; 0x02
     ece:	73 81       	ldd	r23, Z+3	; 0x03
     ed0:	00 e8       	ldi	r16, 0x80	; 128
     ed2:	14 e8       	ldi	r17, 0x84	; 132
     ed4:	2e e1       	ldi	r18, 0x1E	; 30
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	ce 01       	movw	r24, r28
     eda:	f1 dd       	rcall	.-1054   	; 0xabe <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	98 60       	ori	r25, 0x08	; 8
     ee0:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	90 61       	ori	r25, 0x10	; 16
     ee6:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	08 95       	ret

00000ef2 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     ef2:	cf 92       	push	r12
     ef4:	df 92       	push	r13
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     f04:	68 01       	movw	r12, r16
     f06:	79 01       	movw	r14, r18
     f08:	f6 94       	lsr	r15
     f0a:	e7 94       	ror	r14
     f0c:	d7 94       	ror	r13
     f0e:	c7 94       	ror	r12
     f10:	4c 15       	cp	r20, r12
     f12:	5d 05       	cpc	r21, r13
     f14:	6e 05       	cpc	r22, r14
     f16:	7f 05       	cpc	r23, r15
     f18:	70 f4       	brcc	.+28     	; 0xf36 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     f1a:	6a 01       	movw	r12, r20
     f1c:	7b 01       	movw	r14, r22
     f1e:	cc 0c       	add	r12, r12
     f20:	dd 1c       	adc	r13, r13
     f22:	ee 1c       	adc	r14, r14
     f24:	ff 1c       	adc	r15, r15
     f26:	c9 01       	movw	r24, r18
     f28:	b8 01       	movw	r22, r16
     f2a:	a7 01       	movw	r20, r14
     f2c:	96 01       	movw	r18, r12
     f2e:	08 d5       	rcall	.+2576   	; 0x1940 <__udivmodsi4>
     f30:	21 50       	subi	r18, 0x01	; 1
     f32:	31 09       	sbc	r19, r1
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     f3a:	83 2f       	mov	r24, r19
     f3c:	8f 70       	andi	r24, 0x0F	; 15
     f3e:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     f40:	2e 83       	std	Y+6, r18	; 0x06
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	08 95       	ret

00000f54 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	ec 01       	movw	r28, r24
     f60:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	09 f4       	brne	.+2      	; 0xf68 <usart_init_spi+0x14>
     f66:	9b c1       	rjmp	.+822    	; 0x129e <usart_init_spi+0x34a>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     f68:	80 3c       	cpi	r24, 0xC0	; 192
     f6a:	91 05       	cpc	r25, r1
     f6c:	21 f4       	brne	.+8      	; 0xf76 <usart_init_spi+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     f6e:	60 e1       	ldi	r22, 0x10	; 16
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	e5 d2       	rcall	.+1482   	; 0x153e <sysclk_enable_module>
     f74:	94 c1       	rjmp	.+808    	; 0x129e <usart_init_spi+0x34a>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     f76:	80 38       	cpi	r24, 0x80	; 128
     f78:	21 e0       	ldi	r18, 0x01	; 1
     f7a:	92 07       	cpc	r25, r18
     f7c:	21 f4       	brne	.+8      	; 0xf86 <usart_init_spi+0x32>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     f7e:	62 e0       	ldi	r22, 0x02	; 2
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	dd d2       	rcall	.+1466   	; 0x153e <sysclk_enable_module>
     f84:	8c c1       	rjmp	.+792    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     f86:	c1 15       	cp	r28, r1
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	d8 07       	cpc	r29, r24
     f8c:	21 f4       	brne	.+8      	; 0xf96 <usart_init_spi+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     f8e:	61 e0       	ldi	r22, 0x01	; 1
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	d5 d2       	rcall	.+1450   	; 0x153e <sysclk_enable_module>
     f94:	84 c1       	rjmp	.+776    	; 0x129e <usart_init_spi+0x34a>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     f96:	c0 38       	cpi	r28, 0x80	; 128
     f98:	e3 e0       	ldi	r30, 0x03	; 3
     f9a:	de 07       	cpc	r29, r30
     f9c:	21 f4       	brne	.+8      	; 0xfa6 <usart_init_spi+0x52>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	cd d2       	rcall	.+1434   	; 0x153e <sysclk_enable_module>
     fa4:	7c c1       	rjmp	.+760    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     fa6:	c0 39       	cpi	r28, 0x90	; 144
     fa8:	f3 e0       	ldi	r31, 0x03	; 3
     faa:	df 07       	cpc	r29, r31
     fac:	21 f4       	brne	.+8      	; 0xfb6 <usart_init_spi+0x62>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	c5 d2       	rcall	.+1418   	; 0x153e <sysclk_enable_module>
     fb4:	74 c1       	rjmp	.+744    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     fb6:	c1 15       	cp	r28, r1
     fb8:	22 e0       	ldi	r18, 0x02	; 2
     fba:	d2 07       	cpc	r29, r18
     fbc:	21 f4       	brne	.+8      	; 0xfc6 <usart_init_spi+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     fbe:	62 e0       	ldi	r22, 0x02	; 2
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	bd d2       	rcall	.+1402   	; 0x153e <sysclk_enable_module>
     fc4:	6c c1       	rjmp	.+728    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     fc6:	c0 34       	cpi	r28, 0x40	; 64
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	d8 07       	cpc	r29, r24
     fcc:	21 f4       	brne	.+8      	; 0xfd6 <usart_init_spi+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     fce:	62 e0       	ldi	r22, 0x02	; 2
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	b5 d2       	rcall	.+1386   	; 0x153e <sysclk_enable_module>
     fd4:	64 c1       	rjmp	.+712    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     fd6:	c0 32       	cpi	r28, 0x20	; 32
     fd8:	e3 e0       	ldi	r30, 0x03	; 3
     fda:	de 07       	cpc	r29, r30
     fdc:	21 f4       	brne	.+8      	; 0xfe6 <usart_init_spi+0x92>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     fde:	64 e0       	ldi	r22, 0x04	; 4
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	ad d2       	rcall	.+1370   	; 0x153e <sysclk_enable_module>
     fe4:	5c c1       	rjmp	.+696    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     fe6:	c1 15       	cp	r28, r1
     fe8:	f8 e0       	ldi	r31, 0x08	; 8
     fea:	df 07       	cpc	r29, r31
     fec:	21 f4       	brne	.+8      	; 0xff6 <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	a5 d2       	rcall	.+1354   	; 0x153e <sysclk_enable_module>
     ff4:	54 c1       	rjmp	.+680    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     ff6:	c1 15       	cp	r28, r1
     ff8:	29 e0       	ldi	r18, 0x09	; 9
     ffa:	d2 07       	cpc	r29, r18
     ffc:	21 f4       	brne	.+8      	; 0x1006 <usart_init_spi+0xb2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	84 e0       	ldi	r24, 0x04	; 4
    1002:	9d d2       	rcall	.+1338   	; 0x153e <sysclk_enable_module>
    1004:	4c c1       	rjmp	.+664    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1006:	c1 15       	cp	r28, r1
    1008:	8a e0       	ldi	r24, 0x0A	; 10
    100a:	d8 07       	cpc	r29, r24
    100c:	21 f4       	brne	.+8      	; 0x1016 <usart_init_spi+0xc2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	85 e0       	ldi	r24, 0x05	; 5
    1012:	95 d2       	rcall	.+1322   	; 0x153e <sysclk_enable_module>
    1014:	44 c1       	rjmp	.+648    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1016:	c1 15       	cp	r28, r1
    1018:	eb e0       	ldi	r30, 0x0B	; 11
    101a:	de 07       	cpc	r29, r30
    101c:	21 f4       	brne	.+8      	; 0x1026 <usart_init_spi+0xd2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	86 e0       	ldi	r24, 0x06	; 6
    1022:	8d d2       	rcall	.+1306   	; 0x153e <sysclk_enable_module>
    1024:	3c c1       	rjmp	.+632    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1026:	c0 34       	cpi	r28, 0x40	; 64
    1028:	f8 e0       	ldi	r31, 0x08	; 8
    102a:	df 07       	cpc	r29, r31
    102c:	21 f4       	brne	.+8      	; 0x1036 <usart_init_spi+0xe2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    102e:	62 e0       	ldi	r22, 0x02	; 2
    1030:	83 e0       	ldi	r24, 0x03	; 3
    1032:	85 d2       	rcall	.+1290   	; 0x153e <sysclk_enable_module>
    1034:	34 c1       	rjmp	.+616    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1036:	c0 34       	cpi	r28, 0x40	; 64
    1038:	29 e0       	ldi	r18, 0x09	; 9
    103a:	d2 07       	cpc	r29, r18
    103c:	21 f4       	brne	.+8      	; 0x1046 <usart_init_spi+0xf2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    103e:	62 e0       	ldi	r22, 0x02	; 2
    1040:	84 e0       	ldi	r24, 0x04	; 4
    1042:	7d d2       	rcall	.+1274   	; 0x153e <sysclk_enable_module>
    1044:	2c c1       	rjmp	.+600    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1046:	c0 34       	cpi	r28, 0x40	; 64
    1048:	8a e0       	ldi	r24, 0x0A	; 10
    104a:	d8 07       	cpc	r29, r24
    104c:	21 f4       	brne	.+8      	; 0x1056 <usart_init_spi+0x102>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    104e:	62 e0       	ldi	r22, 0x02	; 2
    1050:	85 e0       	ldi	r24, 0x05	; 5
    1052:	75 d2       	rcall	.+1258   	; 0x153e <sysclk_enable_module>
    1054:	24 c1       	rjmp	.+584    	; 0x129e <usart_init_spi+0x34a>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1056:	c0 39       	cpi	r28, 0x90	; 144
    1058:	e8 e0       	ldi	r30, 0x08	; 8
    105a:	de 07       	cpc	r29, r30
    105c:	21 f4       	brne	.+8      	; 0x1066 <usart_init_spi+0x112>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    105e:	64 e0       	ldi	r22, 0x04	; 4
    1060:	83 e0       	ldi	r24, 0x03	; 3
    1062:	6d d2       	rcall	.+1242   	; 0x153e <sysclk_enable_module>
    1064:	1c c1       	rjmp	.+568    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1066:	c0 39       	cpi	r28, 0x90	; 144
    1068:	f9 e0       	ldi	r31, 0x09	; 9
    106a:	df 07       	cpc	r29, r31
    106c:	21 f4       	brne	.+8      	; 0x1076 <usart_init_spi+0x122>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    106e:	64 e0       	ldi	r22, 0x04	; 4
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	65 d2       	rcall	.+1226   	; 0x153e <sysclk_enable_module>
    1074:	14 c1       	rjmp	.+552    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1076:	c0 39       	cpi	r28, 0x90	; 144
    1078:	2a e0       	ldi	r18, 0x0A	; 10
    107a:	d2 07       	cpc	r29, r18
    107c:	21 f4       	brne	.+8      	; 0x1086 <usart_init_spi+0x132>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    107e:	64 e0       	ldi	r22, 0x04	; 4
    1080:	85 e0       	ldi	r24, 0x05	; 5
    1082:	5d d2       	rcall	.+1210   	; 0x153e <sysclk_enable_module>
    1084:	0c c1       	rjmp	.+536    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1086:	c0 39       	cpi	r28, 0x90	; 144
    1088:	8b e0       	ldi	r24, 0x0B	; 11
    108a:	d8 07       	cpc	r29, r24
    108c:	21 f4       	brne	.+8      	; 0x1096 <usart_init_spi+0x142>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    108e:	64 e0       	ldi	r22, 0x04	; 4
    1090:	86 e0       	ldi	r24, 0x06	; 6
    1092:	55 d2       	rcall	.+1194   	; 0x153e <sysclk_enable_module>
    1094:	04 c1       	rjmp	.+520    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1096:	c0 3c       	cpi	r28, 0xC0	; 192
    1098:	e8 e0       	ldi	r30, 0x08	; 8
    109a:	de 07       	cpc	r29, r30
    109c:	21 f4       	brne	.+8      	; 0x10a6 <usart_init_spi+0x152>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    109e:	68 e0       	ldi	r22, 0x08	; 8
    10a0:	83 e0       	ldi	r24, 0x03	; 3
    10a2:	4d d2       	rcall	.+1178   	; 0x153e <sysclk_enable_module>
    10a4:	fc c0       	rjmp	.+504    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    10a6:	c0 3c       	cpi	r28, 0xC0	; 192
    10a8:	f9 e0       	ldi	r31, 0x09	; 9
    10aa:	df 07       	cpc	r29, r31
    10ac:	21 f4       	brne	.+8      	; 0x10b6 <usart_init_spi+0x162>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    10ae:	68 e0       	ldi	r22, 0x08	; 8
    10b0:	84 e0       	ldi	r24, 0x04	; 4
    10b2:	45 d2       	rcall	.+1162   	; 0x153e <sysclk_enable_module>
    10b4:	f4 c0       	rjmp	.+488    	; 0x129e <usart_init_spi+0x34a>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    10b6:	c0 3a       	cpi	r28, 0xA0	; 160
    10b8:	28 e0       	ldi	r18, 0x08	; 8
    10ba:	d2 07       	cpc	r29, r18
    10bc:	71 f4       	brne	.+28     	; 0x10da <usart_init_spi+0x186>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    10be:	60 e1       	ldi	r22, 0x10	; 16
    10c0:	83 e0       	ldi	r24, 0x03	; 3
    10c2:	3d d2       	rcall	.+1146   	; 0x153e <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    10c4:	e0 ea       	ldi	r30, 0xA0	; 160
    10c6:	f8 e0       	ldi	r31, 0x08	; 8
    10c8:	84 81       	ldd	r24, Z+4	; 0x04
    10ca:	8f 7e       	andi	r24, 0xEF	; 239
    10cc:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    10ce:	f8 01       	movw	r30, r16
    10d0:	34 81       	ldd	r19, Z+4	; 0x04
    10d2:	32 50       	subi	r19, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    10d4:	80 ea       	ldi	r24, 0xA0	; 160
    10d6:	98 e0       	ldi	r25, 0x08	; 8
    10d8:	43 c0       	rjmp	.+134    	; 0x1160 <usart_init_spi+0x20c>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    10da:	c0 3a       	cpi	r28, 0xA0	; 160
    10dc:	f9 e0       	ldi	r31, 0x09	; 9
    10de:	df 07       	cpc	r29, r31
    10e0:	21 f4       	brne	.+8      	; 0x10ea <usart_init_spi+0x196>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    10e2:	60 e1       	ldi	r22, 0x10	; 16
    10e4:	84 e0       	ldi	r24, 0x04	; 4
    10e6:	2b d2       	rcall	.+1110   	; 0x153e <sysclk_enable_module>
    10e8:	da c0       	rjmp	.+436    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    10ea:	c0 3a       	cpi	r28, 0xA0	; 160
    10ec:	2a e0       	ldi	r18, 0x0A	; 10
    10ee:	d2 07       	cpc	r29, r18
    10f0:	21 f4       	brne	.+8      	; 0x10fa <usart_init_spi+0x1a6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    10f2:	60 e1       	ldi	r22, 0x10	; 16
    10f4:	85 e0       	ldi	r24, 0x05	; 5
    10f6:	23 d2       	rcall	.+1094   	; 0x153e <sysclk_enable_module>
    10f8:	d2 c0       	rjmp	.+420    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    10fa:	c0 3a       	cpi	r28, 0xA0	; 160
    10fc:	8b e0       	ldi	r24, 0x0B	; 11
    10fe:	d8 07       	cpc	r29, r24
    1100:	21 f4       	brne	.+8      	; 0x110a <usart_init_spi+0x1b6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1102:	60 e1       	ldi	r22, 0x10	; 16
    1104:	86 e0       	ldi	r24, 0x06	; 6
    1106:	1b d2       	rcall	.+1078   	; 0x153e <sysclk_enable_module>
    1108:	ca c0       	rjmp	.+404    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    110a:	c0 3b       	cpi	r28, 0xB0	; 176
    110c:	e8 e0       	ldi	r30, 0x08	; 8
    110e:	de 07       	cpc	r29, r30
    1110:	21 f4       	brne	.+8      	; 0x111a <usart_init_spi+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1112:	60 e2       	ldi	r22, 0x20	; 32
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	13 d2       	rcall	.+1062   	; 0x153e <sysclk_enable_module>
    1118:	c2 c0       	rjmp	.+388    	; 0x129e <usart_init_spi+0x34a>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    111a:	c0 3b       	cpi	r28, 0xB0	; 176
    111c:	f9 e0       	ldi	r31, 0x09	; 9
    111e:	df 07       	cpc	r29, r31
    1120:	21 f4       	brne	.+8      	; 0x112a <usart_init_spi+0x1d6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1122:	60 e2       	ldi	r22, 0x20	; 32
    1124:	84 e0       	ldi	r24, 0x04	; 4
    1126:	0b d2       	rcall	.+1046   	; 0x153e <sysclk_enable_module>
    1128:	ba c0       	rjmp	.+372    	; 0x129e <usart_init_spi+0x34a>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    112a:	c0 38       	cpi	r28, 0x80	; 128
    112c:	24 e0       	ldi	r18, 0x04	; 4
    112e:	d2 07       	cpc	r29, r18
    1130:	21 f4       	brne	.+8      	; 0x113a <usart_init_spi+0x1e6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1132:	60 e4       	ldi	r22, 0x40	; 64
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	03 d2       	rcall	.+1030   	; 0x153e <sysclk_enable_module>
    1138:	b2 c0       	rjmp	.+356    	; 0x129e <usart_init_spi+0x34a>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    113a:	c0 3a       	cpi	r28, 0xA0	; 160
    113c:	84 e0       	ldi	r24, 0x04	; 4
    113e:	d8 07       	cpc	r29, r24
    1140:	21 f4       	brne	.+8      	; 0x114a <usart_init_spi+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1142:	60 e4       	ldi	r22, 0x40	; 64
    1144:	85 e0       	ldi	r24, 0x05	; 5
    1146:	fb d1       	rcall	.+1014   	; 0x153e <sysclk_enable_module>
    1148:	aa c0       	rjmp	.+340    	; 0x129e <usart_init_spi+0x34a>
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	8f 7e       	andi	r24, 0xEF	; 239
    114e:	8c 83       	std	Y+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1150:	fb 01       	movw	r30, r22
    1152:	34 81       	ldd	r19, Z+4	; 0x04
    1154:	32 50       	subi	r19, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1156:	ce 01       	movw	r24, r28
    1158:	c0 3a       	cpi	r28, 0xA0	; 160
    115a:	f8 e0       	ldi	r31, 0x08	; 8
    115c:	df 07       	cpc	r29, r31
    115e:	51 f4       	brne	.+20     	; 0x1174 <usart_init_spi+0x220>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1160:	e0 e4       	ldi	r30, 0x40	; 64
    1162:	f6 e0       	ldi	r31, 0x06	; 6
    1164:	26 85       	ldd	r18, Z+14	; 0x0e
    1166:	24 fd       	sbrc	r18, 4
    1168:	a2 c0       	rjmp	.+324    	; 0x12ae <usart_init_spi+0x35a>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    116a:	0f 2e       	mov	r0, r31
    116c:	f1 e1       	ldi	r31, 0x11	; 17
    116e:	ff 2e       	mov	r15, r31
    1170:	f0 2d       	mov	r31, r0
    1172:	04 c0       	rjmp	.+8      	; 0x117c <usart_init_spi+0x228>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1174:	80 3b       	cpi	r24, 0xB0	; 176
    1176:	28 e0       	ldi	r18, 0x08	; 8
    1178:	92 07       	cpc	r25, r18
    117a:	99 f0       	breq	.+38     	; 0x11a2 <usart_init_spi+0x24e>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    117c:	80 3a       	cpi	r24, 0xA0	; 160
    117e:	e9 e0       	ldi	r30, 0x09	; 9
    1180:	9e 07       	cpc	r25, r30
    1182:	51 f4       	brne	.+20     	; 0x1198 <usart_init_spi+0x244>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1184:	e0 e6       	ldi	r30, 0x60	; 96
    1186:	f6 e0       	ldi	r31, 0x06	; 6
    1188:	26 85       	ldd	r18, Z+14	; 0x0e
    118a:	24 fd       	sbrc	r18, 4
    118c:	95 c0       	rjmp	.+298    	; 0x12b8 <usart_init_spi+0x364>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    118e:	0f 2e       	mov	r0, r31
    1190:	f9 e1       	ldi	r31, 0x19	; 25
    1192:	ff 2e       	mov	r15, r31
    1194:	f0 2d       	mov	r31, r0
    1196:	17 c0       	rjmp	.+46     	; 0x11c6 <usart_init_spi+0x272>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1198:	80 3b       	cpi	r24, 0xB0	; 176
    119a:	f9 e0       	ldi	r31, 0x09	; 9
    119c:	9f 07       	cpc	r25, r31
    119e:	01 f1       	breq	.+64     	; 0x11e0 <usart_init_spi+0x28c>
    11a0:	04 c0       	rjmp	.+8      	; 0x11aa <usart_init_spi+0x256>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    11a2:	0f 2e       	mov	r0, r31
    11a4:	f5 e1       	ldi	r31, 0x15	; 21
    11a6:	ff 2e       	mov	r15, r31
    11a8:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    11aa:	80 3a       	cpi	r24, 0xA0	; 160
    11ac:	2a e0       	ldi	r18, 0x0A	; 10
    11ae:	92 07       	cpc	r25, r18
    11b0:	51 f4       	brne	.+20     	; 0x11c6 <usart_init_spi+0x272>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    11b2:	e0 e8       	ldi	r30, 0x80	; 128
    11b4:	f6 e0       	ldi	r31, 0x06	; 6
    11b6:	86 85       	ldd	r24, Z+14	; 0x0e
    11b8:	84 fd       	sbrc	r24, 4
    11ba:	83 c0       	rjmp	.+262    	; 0x12c2 <usart_init_spi+0x36e>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    11bc:	0f 2e       	mov	r0, r31
    11be:	f1 e2       	ldi	r31, 0x21	; 33
    11c0:	ff 2e       	mov	r15, r31
    11c2:	f0 2d       	mov	r31, r0
    11c4:	16 c0       	rjmp	.+44     	; 0x11f2 <usart_init_spi+0x29e>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    11c6:	80 3a       	cpi	r24, 0xA0	; 160
    11c8:	9b 40       	sbci	r25, 0x0B	; 11
    11ca:	99 f4       	brne	.+38     	; 0x11f2 <usart_init_spi+0x29e>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    11cc:	e0 ea       	ldi	r30, 0xA0	; 160
    11ce:	f6 e0       	ldi	r31, 0x06	; 6
    11d0:	86 85       	ldd	r24, Z+14	; 0x0e
    11d2:	84 ff       	sbrs	r24, 4
    11d4:	0a c0       	rjmp	.+20     	; 0x11ea <usart_init_spi+0x296>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    11d6:	0f 2e       	mov	r0, r31
    11d8:	fd e2       	ldi	r31, 0x2D	; 45
    11da:	ff 2e       	mov	r15, r31
    11dc:	f0 2d       	mov	r31, r0
    11de:	09 c0       	rjmp	.+18     	; 0x11f2 <usart_init_spi+0x29e>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    11e0:	0f 2e       	mov	r0, r31
    11e2:	fd e1       	ldi	r31, 0x1D	; 29
    11e4:	ff 2e       	mov	r15, r31
    11e6:	f0 2d       	mov	r31, r0
    11e8:	04 c0       	rjmp	.+8      	; 0x11f2 <usart_init_spi+0x29e>
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    11ea:	0f 2e       	mov	r0, r31
    11ec:	f9 e2       	ldi	r31, 0x29	; 41
    11ee:	ff 2e       	mov	r15, r31
    11f0:	f0 2d       	mov	r31, r0
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    11f2:	af 2d       	mov	r26, r15
    11f4:	a6 95       	lsr	r26
    11f6:	a6 95       	lsr	r26
    11f8:	a6 95       	lsr	r26
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    11fa:	f0 e2       	ldi	r31, 0x20	; 32
    11fc:	af 9f       	mul	r26, r31
    11fe:	d0 01       	movw	r26, r0
    1200:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1202:	ba 5f       	subi	r27, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1204:	2f 2d       	mov	r18, r15
    1206:	27 70       	andi	r18, 0x07	; 7
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <usart_init_spi+0x2c0>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <usart_init_spi+0x2bc>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1218:	11 96       	adiw	r26, 0x01	; 1
    121a:	8c 93       	st	X, r24
    121c:	11 97       	sbiw	r26, 0x01	; 1
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    121e:	32 30       	cpi	r19, 0x02	; 2
    1220:	10 f4       	brcc	.+4      	; 0x1226 <usart_init_spi+0x2d2>
    1222:	30 e4       	ldi	r19, 0x40	; 64
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <usart_init_spi+0x2d4>
    1226:	30 e0       	ldi	r19, 0x00	; 0
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1228:	fd 01       	movw	r30, r26
    122a:	70 96       	adiw	r30, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    122c:	e2 0f       	add	r30, r18
    122e:	f1 1d       	adc	r31, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1230:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1232:	f8 94       	cli
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1234:	20 81       	ld	r18, Z
    1236:	27 70       	andi	r18, 0x07	; 7
    1238:	20 83       	st	Z, r18
	*pin_ctrl |= mode;
    123a:	20 81       	ld	r18, Z
    123c:	23 2b       	or	r18, r19
    123e:	20 83       	st	Z, r18
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1240:	9f bf       	out	0x3f, r25	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1242:	15 96       	adiw	r26, 0x05	; 5
    1244:	8c 93       	st	X, r24
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1246:	8d 81       	ldd	r24, Y+5	; 0x05
    1248:	80 6c       	ori	r24, 0xC0	; 192
    124a:	8d 83       	std	Y+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    124c:	f8 01       	movw	r30, r16
    124e:	84 81       	ldd	r24, Z+4	; 0x04
    1250:	8d 7f       	andi	r24, 0xFD	; 253
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	21 f4       	brne	.+8      	; 0x125e <usart_init_spi+0x30a>
		usart->CTRLC |= USART_UCPHA_bm;
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	82 60       	ori	r24, 0x02	; 2
    125a:	8d 83       	std	Y+5, r24	; 0x05
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <usart_init_spi+0x310>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	8d 7f       	andi	r24, 0xFD	; 253
    1262:	8d 83       	std	Y+5, r24	; 0x05
	}
	if (opt->data_order) {
    1264:	f8 01       	movw	r30, r16
    1266:	85 81       	ldd	r24, Z+5	; 0x05
    1268:	88 23       	and	r24, r24
    126a:	21 f0       	breq	.+8      	; 0x1274 <usart_init_spi+0x320>
		(usart)->CTRLC |= USART_DORD_bm;
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	84 60       	ori	r24, 0x04	; 4
    1270:	8d 83       	std	Y+5, r24	; 0x05
    1272:	03 c0       	rjmp	.+6      	; 0x127a <usart_init_spi+0x326>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	8b 7f       	andi	r24, 0xFB	; 251
    1278:	8d 83       	std	Y+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    127a:	f8 01       	movw	r30, r16
    127c:	40 81       	ld	r20, Z
    127e:	51 81       	ldd	r21, Z+1	; 0x01
    1280:	62 81       	ldd	r22, Z+2	; 0x02
    1282:	73 81       	ldd	r23, Z+3	; 0x03
    1284:	00 e8       	ldi	r16, 0x80	; 128
    1286:	14 e8       	ldi	r17, 0x84	; 132
    1288:	2e e1       	ldi	r18, 0x1E	; 30
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	ce 01       	movw	r24, r28
    128e:	31 de       	rcall	.-926    	; 0xef2 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	88 60       	ori	r24, 0x08	; 8
    1294:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	80 61       	ori	r24, 0x10	; 16
    129a:	8c 83       	std	Y+4, r24	; 0x04
    129c:	17 c0       	rjmp	.+46     	; 0x12cc <usart_init_spi+0x378>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	8f 7e       	andi	r24, 0xEF	; 239
    12a2:	8c 83       	std	Y+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    12a4:	f8 01       	movw	r30, r16
    12a6:	34 81       	ldd	r19, Z+4	; 0x04
    12a8:	32 50       	subi	r19, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    12aa:	ce 01       	movw	r24, r28
    12ac:	63 cf       	rjmp	.-314    	; 0x1174 <usart_init_spi+0x220>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    12ae:	0f 2e       	mov	r0, r31
    12b0:	f5 e1       	ldi	r31, 0x15	; 21
    12b2:	ff 2e       	mov	r15, r31
    12b4:	f0 2d       	mov	r31, r0
    12b6:	62 cf       	rjmp	.-316    	; 0x117c <usart_init_spi+0x228>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    12b8:	0f 2e       	mov	r0, r31
    12ba:	fd e1       	ldi	r31, 0x1D	; 29
    12bc:	ff 2e       	mov	r15, r31
    12be:	f0 2d       	mov	r31, r0
    12c0:	82 cf       	rjmp	.-252    	; 0x11c6 <usart_init_spi+0x272>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    12c2:	0f 2e       	mov	r0, r31
    12c4:	f5 e2       	ldi	r31, 0x25	; 37
    12c6:	ff 2e       	mov	r15, r31
    12c8:	f0 2d       	mov	r31, r0
    12ca:	93 cf       	rjmp	.-218    	; 0x11f2 <usart_init_spi+0x29e>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	08 95       	ret

000012d8 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    12d8:	80 3a       	cpi	r24, 0xA0	; 160
    12da:	28 e0       	ldi	r18, 0x08	; 8
    12dc:	92 07       	cpc	r25, r18
    12de:	21 f4       	brne	.+8      	; 0x12e8 <usart_spi_init+0x10>
    12e0:	60 e1       	ldi	r22, 0x10	; 16
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	2c c1       	rjmp	.+600    	; 0x153e <sysclk_enable_module>
    12e6:	08 95       	ret
    12e8:	80 3b       	cpi	r24, 0xB0	; 176
    12ea:	28 e0       	ldi	r18, 0x08	; 8
    12ec:	92 07       	cpc	r25, r18
    12ee:	21 f4       	brne	.+8      	; 0x12f8 <usart_spi_init+0x20>
    12f0:	60 e2       	ldi	r22, 0x20	; 32
    12f2:	83 e0       	ldi	r24, 0x03	; 3
    12f4:	24 c1       	rjmp	.+584    	; 0x153e <sysclk_enable_module>
    12f6:	08 95       	ret
    12f8:	80 3a       	cpi	r24, 0xA0	; 160
    12fa:	29 e0       	ldi	r18, 0x09	; 9
    12fc:	92 07       	cpc	r25, r18
    12fe:	21 f4       	brne	.+8      	; 0x1308 <usart_spi_init+0x30>
    1300:	60 e1       	ldi	r22, 0x10	; 16
    1302:	84 e0       	ldi	r24, 0x04	; 4
    1304:	1c c1       	rjmp	.+568    	; 0x153e <sysclk_enable_module>
    1306:	08 95       	ret
    1308:	80 3b       	cpi	r24, 0xB0	; 176
    130a:	29 e0       	ldi	r18, 0x09	; 9
    130c:	92 07       	cpc	r25, r18
    130e:	21 f4       	brne	.+8      	; 0x1318 <usart_spi_init+0x40>
    1310:	60 e2       	ldi	r22, 0x20	; 32
    1312:	84 e0       	ldi	r24, 0x04	; 4
    1314:	14 c1       	rjmp	.+552    	; 0x153e <sysclk_enable_module>
    1316:	08 95       	ret
    1318:	80 3a       	cpi	r24, 0xA0	; 160
    131a:	2a e0       	ldi	r18, 0x0A	; 10
    131c:	92 07       	cpc	r25, r18
    131e:	21 f4       	brne	.+8      	; 0x1328 <usart_spi_init+0x50>
    1320:	60 e1       	ldi	r22, 0x10	; 16
    1322:	85 e0       	ldi	r24, 0x05	; 5
    1324:	0c c1       	rjmp	.+536    	; 0x153e <sysclk_enable_module>
    1326:	08 95       	ret
    1328:	80 3a       	cpi	r24, 0xA0	; 160
    132a:	9b 40       	sbci	r25, 0x0B	; 11
    132c:	19 f4       	brne	.+6      	; 0x1334 <usart_spi_init+0x5c>
    132e:	60 e1       	ldi	r22, 0x10	; 16
    1330:	86 e0       	ldi	r24, 0x06	; 6
    1332:	05 c1       	rjmp	.+522    	; 0x153e <sysclk_enable_module>
    1334:	08 95       	ret

00001336 <usart_spi_setup_device>:
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	00 d0       	rcall	.+0      	; 0x1340 <usart_spi_setup_device+0xa>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <usart_spi_setup_device+0xc>
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	09 83       	std	Y+1, r16	; 0x01
    1348:	1a 83       	std	Y+2, r17	; 0x02
    134a:	2b 83       	std	Y+3, r18	; 0x03
    134c:	3c 83       	std	Y+4, r19	; 0x04
    134e:	4d 83       	std	Y+5, r20	; 0x05
    1350:	1e 82       	std	Y+6, r1	; 0x06
    1352:	be 01       	movw	r22, r28
    1354:	6f 5f       	subi	r22, 0xFF	; 255
    1356:	7f 4f       	sbci	r23, 0xFF	; 255
    1358:	fd dd       	rcall	.-1030   	; 0xf54 <usart_init_spi>
    135a:	26 96       	adiw	r28, 0x06	; 6
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	08 95       	ret

0000136a <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    136a:	fb 01       	movw	r30, r22
    136c:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    136e:	e8 2f       	mov	r30, r24
    1370:	e6 95       	lsr	r30
    1372:	e6 95       	lsr	r30
    1374:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1376:	40 e2       	ldi	r20, 0x20	; 32
    1378:	e4 9f       	mul	r30, r20
    137a:	f0 01       	movw	r30, r0
    137c:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    137e:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1380:	87 70       	andi	r24, 0x07	; 7
    1382:	21 e0       	ldi	r18, 0x01	; 1
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	a9 01       	movw	r20, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <usart_spi_select_device+0x24>
    138a:	44 0f       	add	r20, r20
    138c:	55 1f       	adc	r21, r21
    138e:	8a 95       	dec	r24
    1390:	e2 f7       	brpl	.-8      	; 0x138a <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1392:	46 83       	std	Z+6, r20	; 0x06
    1394:	08 95       	ret

00001396 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    1396:	fb 01       	movw	r30, r22
    1398:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    139a:	e8 2f       	mov	r30, r24
    139c:	e6 95       	lsr	r30
    139e:	e6 95       	lsr	r30
    13a0:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    13a2:	40 e2       	ldi	r20, 0x20	; 32
    13a4:	e4 9f       	mul	r30, r20
    13a6:	f0 01       	movw	r30, r0
    13a8:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    13aa:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    13ac:	87 70       	andi	r24, 0x07	; 7
    13ae:	21 e0       	ldi	r18, 0x01	; 1
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	a9 01       	movw	r20, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <usart_spi_deselect_device+0x24>
    13b6:	44 0f       	add	r20, r20
    13b8:	55 1f       	adc	r21, r21
    13ba:	8a 95       	dec	r24
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    13be:	45 83       	std	Z+5, r20	; 0x05
    13c0:	08 95       	ret

000013c2 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    13c2:	80 93 cc 22 	sts	0x22CC, r24
    13c6:	90 93 cd 22 	sts	0x22CD, r25
    13ca:	08 95       	ret

000013cc <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    13cc:	20 e8       	ldi	r18, 0x80	; 128
    13ce:	82 9f       	mul	r24, r18
    13d0:	c0 01       	movw	r24, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	fc 01       	movw	r30, r24
    13d6:	e6 0f       	add	r30, r22
    13d8:	f1 1d       	adc	r31, r1
    13da:	80 91 cc 22 	lds	r24, 0x22CC
    13de:	90 91 cd 22 	lds	r25, 0x22CD
    13e2:	e8 0f       	add	r30, r24
    13e4:	f9 1f       	adc	r31, r25
    13e6:	40 83       	st	Z, r20
    13e8:	08 95       	ret

000013ea <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    13ea:	20 e8       	ldi	r18, 0x80	; 128
    13ec:	82 9f       	mul	r24, r18
    13ee:	c0 01       	movw	r24, r0
    13f0:	11 24       	eor	r1, r1
    13f2:	fc 01       	movw	r30, r24
    13f4:	e6 0f       	add	r30, r22
    13f6:	f1 1d       	adc	r31, r1
    13f8:	80 91 cc 22 	lds	r24, 0x22CC
    13fc:	90 91 cd 22 	lds	r25, 0x22CD
    1400:	e8 0f       	add	r30, r24
    1402:	f9 1f       	adc	r31, r25
}
    1404:	80 81       	ld	r24, Z
    1406:	08 95       	ret

00001408 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    1408:	ff 92       	push	r15
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	e4 2f       	mov	r30, r20
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	e8 0f       	add	r30, r24
    1418:	f1 1d       	adc	r31, r1
    141a:	e1 38       	cpi	r30, 0x81	; 129
    141c:	f1 05       	cpc	r31, r1
    141e:	14 f0       	brlt	.+4      	; 0x1424 <gfx_mono_generic_draw_horizontal_line+0x1c>
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	48 1b       	sub	r20, r24
    1424:	44 23       	and	r20, r20
    1426:	09 f4       	brne	.+2      	; 0x142a <gfx_mono_generic_draw_horizontal_line+0x22>
    1428:	59 c0       	rjmp	.+178    	; 0x14dc <gfx_mono_generic_draw_horizontal_line+0xd4>
    142a:	c6 2f       	mov	r28, r22
    142c:	c6 95       	lsr	r28
    142e:	c6 95       	lsr	r28
    1430:	c6 95       	lsr	r28
    1432:	ec 2f       	mov	r30, r28
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	f1 95       	neg	r31
    1438:	e1 95       	neg	r30
    143a:	f1 09       	sbc	r31, r1
    143c:	ee 0f       	add	r30, r30
    143e:	ff 1f       	adc	r31, r31
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	ee 0f       	add	r30, r30
    1446:	ff 1f       	adc	r31, r31
    1448:	df 01       	movw	r26, r30
    144a:	a6 0f       	add	r26, r22
    144c:	b1 1d       	adc	r27, r1
    144e:	bd 01       	movw	r22, r26
    1450:	e1 e0       	ldi	r30, 0x01	; 1
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	df 01       	movw	r26, r30
    1456:	02 c0       	rjmp	.+4      	; 0x145c <gfx_mono_generic_draw_horizontal_line+0x54>
    1458:	aa 0f       	add	r26, r26
    145a:	bb 1f       	adc	r27, r27
    145c:	6a 95       	dec	r22
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <gfx_mono_generic_draw_horizontal_line+0x50>
    1460:	0a 2f       	mov	r16, r26
    1462:	21 30       	cpi	r18, 0x01	; 1
    1464:	49 f0       	breq	.+18     	; 0x1478 <gfx_mono_generic_draw_horizontal_line+0x70>
    1466:	68 f0       	brcs	.+26     	; 0x1482 <gfx_mono_generic_draw_horizontal_line+0x7a>
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	09 f0       	breq	.+2      	; 0x146e <gfx_mono_generic_draw_horizontal_line+0x66>
    146c:	37 c0       	rjmp	.+110    	; 0x14dc <gfx_mono_generic_draw_horizontal_line+0xd4>
    146e:	d4 2f       	mov	r29, r20
    1470:	ff 24       	eor	r15, r15
    1472:	fa 94       	dec	r15
    1474:	f8 0e       	add	r15, r24
    1476:	26 c0       	rjmp	.+76     	; 0x14c4 <gfx_mono_generic_draw_horizontal_line+0xbc>
    1478:	d4 2f       	mov	r29, r20
    147a:	ff 24       	eor	r15, r15
    147c:	fa 94       	dec	r15
    147e:	f8 0e       	add	r15, r24
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <gfx_mono_generic_draw_horizontal_line+0x88>
    1482:	d4 2f       	mov	r29, r20
    1484:	ff 24       	eor	r15, r15
    1486:	fa 94       	dec	r15
    1488:	f8 0e       	add	r15, r24
    148a:	0a 2f       	mov	r16, r26
    148c:	00 95       	com	r16
    148e:	0d c0       	rjmp	.+26     	; 0x14aa <gfx_mono_generic_draw_horizontal_line+0xa2>
    1490:	1f 2d       	mov	r17, r15
    1492:	1d 0f       	add	r17, r29
    1494:	61 2f       	mov	r22, r17
    1496:	8c 2f       	mov	r24, r28
    1498:	0a db       	rcall	.-2540   	; 0xaae <gfx_mono_st7565r_get_byte>
    149a:	48 2f       	mov	r20, r24
    149c:	40 2b       	or	r20, r16
    149e:	61 2f       	mov	r22, r17
    14a0:	8c 2f       	mov	r24, r28
    14a2:	d7 d9       	rcall	.-3154   	; 0x852 <gfx_mono_st7565r_put_byte>
    14a4:	d1 50       	subi	r29, 0x01	; 1
    14a6:	a1 f7       	brne	.-24     	; 0x1490 <gfx_mono_generic_draw_horizontal_line+0x88>
    14a8:	19 c0       	rjmp	.+50     	; 0x14dc <gfx_mono_generic_draw_horizontal_line+0xd4>
    14aa:	1f 2d       	mov	r17, r15
    14ac:	1d 0f       	add	r17, r29
    14ae:	61 2f       	mov	r22, r17
    14b0:	8c 2f       	mov	r24, r28
    14b2:	fd da       	rcall	.-2566   	; 0xaae <gfx_mono_st7565r_get_byte>
    14b4:	48 2f       	mov	r20, r24
    14b6:	40 23       	and	r20, r16
    14b8:	61 2f       	mov	r22, r17
    14ba:	8c 2f       	mov	r24, r28
    14bc:	ca d9       	rcall	.-3180   	; 0x852 <gfx_mono_st7565r_put_byte>
    14be:	d1 50       	subi	r29, 0x01	; 1
    14c0:	a1 f7       	brne	.-24     	; 0x14aa <gfx_mono_generic_draw_horizontal_line+0xa2>
    14c2:	0c c0       	rjmp	.+24     	; 0x14dc <gfx_mono_generic_draw_horizontal_line+0xd4>
    14c4:	1f 2d       	mov	r17, r15
    14c6:	1d 0f       	add	r17, r29
    14c8:	61 2f       	mov	r22, r17
    14ca:	8c 2f       	mov	r24, r28
    14cc:	f0 da       	rcall	.-2592   	; 0xaae <gfx_mono_st7565r_get_byte>
    14ce:	48 2f       	mov	r20, r24
    14d0:	40 27       	eor	r20, r16
    14d2:	61 2f       	mov	r22, r17
    14d4:	8c 2f       	mov	r24, r28
    14d6:	bd d9       	rcall	.-3206   	; 0x852 <gfx_mono_st7565r_put_byte>
    14d8:	d1 50       	subi	r29, 0x01	; 1
    14da:	a1 f7       	brne	.-24     	; 0x14c4 <gfx_mono_generic_draw_horizontal_line+0xbc>
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	08 95       	ret

000014e8 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    14e8:	ff 92       	push	r15
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	d8 2f       	mov	r29, r24
    14f4:	14 2f       	mov	r17, r20
	if (height == 0) {
    14f6:	22 23       	and	r18, r18
    14f8:	61 f0       	breq	.+24     	; 0x1512 <gfx_mono_generic_draw_filled_rect+0x2a>
    14fa:	c2 2f       	mov	r28, r18
    14fc:	ff 24       	eor	r15, r15
    14fe:	fa 94       	dec	r15
    1500:	f6 0e       	add	r15, r22
    1502:	6f 2d       	mov	r22, r15
    1504:	6c 0f       	add	r22, r28
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    1506:	20 2f       	mov	r18, r16
    1508:	41 2f       	mov	r20, r17
    150a:	8d 2f       	mov	r24, r29
    150c:	7d df       	rcall	.-262    	; 0x1408 <gfx_mono_generic_draw_horizontal_line>
    150e:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    1510:	c1 f7       	brne	.-16     	; 0x1502 <gfx_mono_generic_draw_filled_rect+0x1a>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	08 95       	ret

0000151e <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	80 93 70 00 	sts	0x0070, r24
    1524:	80 93 71 00 	sts	0x0071, r24
    1528:	80 93 72 00 	sts	0x0072, r24
    152c:	80 93 73 00 	sts	0x0073, r24
    1530:	80 93 74 00 	sts	0x0074, r24
    1534:	80 93 75 00 	sts	0x0075, r24
    1538:	80 93 76 00 	sts	0x0076, r24
    153c:	08 95       	ret

0000153e <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    153e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1540:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1542:	e8 2f       	mov	r30, r24
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	e0 59       	subi	r30, 0x90	; 144
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	60 95       	com	r22
    154c:	80 81       	ld	r24, Z
    154e:	68 23       	and	r22, r24
    1550:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1552:	9f bf       	out	0x3f, r25	; 63
    1554:	08 95       	ret

00001556 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1556:	af 92       	push	r10
    1558:	bf 92       	push	r11
    155a:	cf 92       	push	r12
    155c:	df 92       	push	r13
    155e:	ef 92       	push	r14
    1560:	ff 92       	push	r15
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	c8 2f       	mov	r28, r24
    156c:	d6 2e       	mov	r13, r22
    156e:	a4 2e       	mov	r10, r20
    1570:	79 01       	movw	r14, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1572:	00 e0       	ldi	r16, 0x00	; 0
    1574:	f9 01       	movw	r30, r18
    1576:	24 81       	ldd	r18, Z+4	; 0x04
    1578:	43 81       	ldd	r20, Z+3	; 0x03
    157a:	6a 2d       	mov	r22, r10
    157c:	8d 2d       	mov	r24, r13
    157e:	b4 df       	rcall	.-152    	; 0x14e8 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    1580:	f7 01       	movw	r30, r14
    1582:	90 81       	ld	r25, Z
    1584:	91 11       	cpse	r25, r1
    1586:	39 c0       	rjmp	.+114    	; 0x15fa <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    1588:	83 81       	ldd	r24, Z+3	; 0x03
    158a:	a8 2f       	mov	r26, r24
    158c:	a6 95       	lsr	r26
    158e:	a6 95       	lsr	r26
    1590:	a6 95       	lsr	r26
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1592:	87 70       	andi	r24, 0x07	; 7
    1594:	09 f0       	breq	.+2      	; 0x1598 <gfx_mono_draw_char+0x42>
		char_row_size++;
    1596:	af 5f       	subi	r26, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    1598:	f7 01       	movw	r30, r14
    159a:	c4 80       	ldd	r12, Z+4	; 0x04
    159c:	ac 9d       	mul	r26, r12
    159e:	d0 01       	movw	r26, r0
    15a0:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
    15a2:	ec 2f       	mov	r30, r28
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	e7 01       	movw	r28, r14
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	e8 1b       	sub	r30, r24
    15ac:	f1 09       	sbc	r31, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
    15ae:	ae 9f       	mul	r26, r30
    15b0:	90 01       	movw	r18, r0
    15b2:	af 9f       	mul	r26, r31
    15b4:	30 0d       	add	r19, r0
    15b6:	be 9f       	mul	r27, r30
    15b8:	30 0d       	add	r19, r0
    15ba:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    15bc:	09 80       	ldd	r0, Y+1	; 0x01
    15be:	da 81       	ldd	r29, Y+2	; 0x02
    15c0:	c0 2d       	mov	r28, r0
    15c2:	c2 0f       	add	r28, r18
    15c4:	d3 1f       	adc	r29, r19
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    15c6:	f7 01       	movw	r30, r14
    15c8:	b3 80       	ldd	r11, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    15ca:	bb 20       	and	r11, r11
    15cc:	99 f0       	breq	.+38     	; 0x15f4 <gfx_mono_draw_char+0x9e>
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
    15ce:	00 e0       	ldi	r16, 0x00	; 0
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    15d0:	10 e0       	ldi	r17, 0x00	; 0
    15d2:	81 2f       	mov	r24, r17
    15d4:	8d 0d       	add	r24, r13
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    15d6:	91 2f       	mov	r25, r17
    15d8:	97 70       	andi	r25, 0x07	; 7
    15da:	19 f4       	brne	.+6      	; 0x15e2 <gfx_mono_draw_char+0x8c>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    15dc:	fe 01       	movw	r30, r28
    15de:	04 91       	lpm	r16, Z
				glyph_data++;
    15e0:	21 96       	adiw	r28, 0x01	; 1
			}

			if ((glyph_byte & 0x80)) {
    15e2:	00 23       	and	r16, r16
    15e4:	1c f4       	brge	.+6      	; 0x15ec <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	6a 2d       	mov	r22, r10
    15ea:	24 da       	rcall	.-3000   	; 0xa34 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    15ec:	00 0f       	add	r16, r16

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    15ee:	1f 5f       	subi	r17, 0xFF	; 255
    15f0:	1b 11       	cpse	r17, r11
    15f2:	ef cf       	rjmp	.-34     	; 0x15d2 <gfx_mono_draw_char+0x7c>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    15f4:	a3 94       	inc	r10
		inc_x = x;
		rows_left--;
    15f6:	ca 94       	dec	r12
	} while (rows_left > 0);
    15f8:	31 f7       	brne	.-52     	; 0x15c6 <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	df 90       	pop	r13
    1608:	cf 90       	pop	r12
    160a:	bf 90       	pop	r11
    160c:	af 90       	pop	r10
    160e:	08 95       	ret

00001610 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    1610:	df 92       	push	r13
    1612:	ef 92       	push	r14
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	e4 2e       	mov	r14, r20
    1620:	89 01       	movw	r16, r18
    1622:	ec 01       	movw	r28, r24
    1624:	f6 2e       	mov	r15, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1626:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    1628:	89 91       	ld	r24, Y+
    162a:	8a 30       	cpi	r24, 0x0A	; 10
    162c:	31 f4       	brne	.+12     	; 0x163a <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    162e:	f8 01       	movw	r30, r16
    1630:	84 81       	ldd	r24, Z+4	; 0x04
    1632:	8f 5f       	subi	r24, 0xFF	; 255
    1634:	e8 0e       	add	r14, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1636:	fd 2c       	mov	r15, r13
    1638:	09 c0       	rjmp	.+18     	; 0x164c <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    163a:	8d 30       	cpi	r24, 0x0D	; 13
    163c:	39 f0       	breq	.+14     	; 0x164c <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    163e:	98 01       	movw	r18, r16
    1640:	4e 2d       	mov	r20, r14
    1642:	6f 2d       	mov	r22, r15
    1644:	88 df       	rcall	.-240    	; 0x1556 <gfx_mono_draw_char>
			x += font->width;
    1646:	f8 01       	movw	r30, r16
    1648:	83 81       	ldd	r24, Z+3	; 0x03
    164a:	f8 0e       	add	r15, r24
		}
	} while (*(++str));
    164c:	88 81       	ld	r24, Y
    164e:	81 11       	cpse	r24, r1
    1650:	eb cf       	rjmp	.-42     	; 0x1628 <gfx_mono_draw_string+0x18>
}
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	08 95       	ret

00001662 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	fc 01       	movw	r30, r24
    1668:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    166e:	c6 2f       	mov	r28, r22
    1670:	d0 e0       	ldi	r29, 0x00	; 0
    1672:	de 01       	movw	r26, r28
    1674:	02 2e       	mov	r0, r18
    1676:	02 c0       	rjmp	.+4      	; 0x167c <ioport_configure_port_pin+0x1a>
    1678:	b5 95       	asr	r27
    167a:	a7 95       	ror	r26
    167c:	0a 94       	dec	r0
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <ioport_configure_port_pin+0x16>
    1680:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1682:	50 83       	st	Z, r21
    1684:	2f 5f       	subi	r18, 0xFF	; 255
    1686:	3f 4f       	sbci	r19, 0xFF	; 255
    1688:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    168a:	28 30       	cpi	r18, 0x08	; 8
    168c:	31 05       	cpc	r19, r1
    168e:	89 f7       	brne	.-30     	; 0x1672 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1690:	40 ff       	sbrs	r20, 0
    1692:	0a c0       	rjmp	.+20     	; 0x16a8 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    1694:	41 ff       	sbrs	r20, 1
    1696:	03 c0       	rjmp	.+6      	; 0x169e <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1698:	fc 01       	movw	r30, r24
    169a:	65 83       	std	Z+5, r22	; 0x05
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    169e:	fc 01       	movw	r30, r24
    16a0:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    16a2:	fc 01       	movw	r30, r24
    16a4:	61 83       	std	Z+1, r22	; 0x01
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    16a8:	fc 01       	movw	r30, r24
    16aa:	62 83       	std	Z+2, r22	; 0x02
	}
}
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	08 95       	ret

000016b2 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    16b2:	43 e0       	ldi	r20, 0x03	; 3
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	61 e0       	ldi	r22, 0x01	; 1
    16b8:	80 ee       	ldi	r24, 0xE0	; 224
    16ba:	97 e0       	ldi	r25, 0x07	; 7
    16bc:	d2 df       	rcall	.-92     	; 0x1662 <ioport_configure_port_pin>
    16be:	43 e0       	ldi	r20, 0x03	; 3
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	62 e0       	ldi	r22, 0x02	; 2
    16c4:	80 ee       	ldi	r24, 0xE0	; 224
    16c6:	97 e0       	ldi	r25, 0x07	; 7
    16c8:	cc df       	rcall	.-104    	; 0x1662 <ioport_configure_port_pin>
    16ca:	43 e0       	ldi	r20, 0x03	; 3
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	60 e1       	ldi	r22, 0x10	; 16
    16d0:	80 e6       	ldi	r24, 0x60	; 96
    16d2:	96 e0       	ldi	r25, 0x06	; 6
    16d4:	c6 df       	rcall	.-116    	; 0x1662 <ioport_configure_port_pin>
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	50 e4       	ldi	r21, 0x40	; 64
    16da:	60 e2       	ldi	r22, 0x20	; 32
    16dc:	80 e6       	ldi	r24, 0x60	; 96
    16de:	96 e0       	ldi	r25, 0x06	; 6
    16e0:	c0 df       	rcall	.-128    	; 0x1662 <ioport_configure_port_pin>
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	5b e1       	ldi	r21, 0x1B	; 27
    16e6:	60 e2       	ldi	r22, 0x20	; 32
    16e8:	80 e8       	ldi	r24, 0x80	; 128
    16ea:	96 e0       	ldi	r25, 0x06	; 6
    16ec:	ba df       	rcall	.-140    	; 0x1662 <ioport_configure_port_pin>
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	5b e1       	ldi	r21, 0x1B	; 27
    16f2:	62 e0       	ldi	r22, 0x02	; 2
    16f4:	80 ea       	ldi	r24, 0xA0	; 160
    16f6:	96 e0       	ldi	r25, 0x06	; 6
    16f8:	b4 df       	rcall	.-152    	; 0x1662 <ioport_configure_port_pin>
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	5b e1       	ldi	r21, 0x1B	; 27
    16fe:	64 e0       	ldi	r22, 0x04	; 4
    1700:	80 ea       	ldi	r24, 0xA0	; 160
    1702:	96 e0       	ldi	r25, 0x06	; 6
    1704:	ae df       	rcall	.-164    	; 0x1662 <ioport_configure_port_pin>
    1706:	43 e0       	ldi	r20, 0x03	; 3
    1708:	50 e0       	ldi	r21, 0x00	; 0
    170a:	62 e0       	ldi	r22, 0x02	; 2
    170c:	80 e6       	ldi	r24, 0x60	; 96
    170e:	96 e0       	ldi	r25, 0x06	; 6
    1710:	a8 df       	rcall	.-176    	; 0x1662 <ioport_configure_port_pin>
    1712:	43 e0       	ldi	r20, 0x03	; 3
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	68 e0       	ldi	r22, 0x08	; 8
    1718:	80 e6       	ldi	r24, 0x60	; 96
    171a:	96 e0       	ldi	r25, 0x06	; 6
    171c:	a2 df       	rcall	.-188    	; 0x1662 <ioport_configure_port_pin>
    171e:	43 e0       	ldi	r20, 0x03	; 3
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	68 e0       	ldi	r22, 0x08	; 8
    1724:	80 ea       	ldi	r24, 0xA0	; 160
    1726:	96 e0       	ldi	r25, 0x06	; 6
    1728:	9c df       	rcall	.-200    	; 0x1662 <ioport_configure_port_pin>
    172a:	43 e0       	ldi	r20, 0x03	; 3
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	61 e0       	ldi	r22, 0x01	; 1
    1730:	80 e6       	ldi	r24, 0x60	; 96
    1732:	96 e0       	ldi	r25, 0x06	; 6
    1734:	96 df       	rcall	.-212    	; 0x1662 <ioport_configure_port_pin>
    1736:	43 e0       	ldi	r20, 0x03	; 3
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	68 e0       	ldi	r22, 0x08	; 8
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	96 e0       	ldi	r25, 0x06	; 6
    1740:	90 df       	rcall	.-224    	; 0x1662 <ioport_configure_port_pin>
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	60 e1       	ldi	r22, 0x10	; 16
    1748:	80 e8       	ldi	r24, 0x80	; 128
    174a:	96 e0       	ldi	r25, 0x06	; 6
    174c:	8a df       	rcall	.-236    	; 0x1662 <ioport_configure_port_pin>
    174e:	43 e0       	ldi	r20, 0x03	; 3
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	62 e0       	ldi	r22, 0x02	; 2
    1754:	80 e6       	ldi	r24, 0x60	; 96
    1756:	96 e0       	ldi	r25, 0x06	; 6
    1758:	84 df       	rcall	.-248    	; 0x1662 <ioport_configure_port_pin>
    175a:	43 e0       	ldi	r20, 0x03	; 3
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	68 e0       	ldi	r22, 0x08	; 8
    1760:	80 e6       	ldi	r24, 0x60	; 96
    1762:	96 e0       	ldi	r25, 0x06	; 6
    1764:	7e df       	rcall	.-260    	; 0x1662 <ioport_configure_port_pin>
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	64 e0       	ldi	r22, 0x04	; 4
    176c:	80 e6       	ldi	r24, 0x60	; 96
    176e:	96 e0       	ldi	r25, 0x06	; 6
    1770:	78 df       	rcall	.-272    	; 0x1662 <ioport_configure_port_pin>
    1772:	43 e0       	ldi	r20, 0x03	; 3
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	60 e1       	ldi	r22, 0x10	; 16
    1778:	80 ea       	ldi	r24, 0xA0	; 160
    177a:	96 e0       	ldi	r25, 0x06	; 6
    177c:	72 df       	rcall	.-284    	; 0x1662 <ioport_configure_port_pin>
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	61 e0       	ldi	r22, 0x01	; 1
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	96 e0       	ldi	r25, 0x06	; 6
    1788:	6c df       	rcall	.-296    	; 0x1662 <ioport_configure_port_pin>
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	64 e0       	ldi	r22, 0x04	; 4
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	96 e0       	ldi	r25, 0x06	; 6
    1794:	66 df       	rcall	.-308    	; 0x1662 <ioport_configure_port_pin>
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	62 e0       	ldi	r22, 0x02	; 2
    179c:	80 e2       	ldi	r24, 0x20	; 32
    179e:	96 e0       	ldi	r25, 0x06	; 6
    17a0:	60 df       	rcall	.-320    	; 0x1662 <ioport_configure_port_pin>
    17a2:	43 e0       	ldi	r20, 0x03	; 3
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	68 e0       	ldi	r22, 0x08	; 8
    17a8:	80 e4       	ldi	r24, 0x40	; 64
    17aa:	96 e0       	ldi	r25, 0x06	; 6
    17ac:	5a df       	rcall	.-332    	; 0x1662 <ioport_configure_port_pin>
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	64 e0       	ldi	r22, 0x04	; 4
    17b4:	80 e4       	ldi	r24, 0x40	; 64
    17b6:	96 e0       	ldi	r25, 0x06	; 6
    17b8:	54 df       	rcall	.-344    	; 0x1662 <ioport_configure_port_pin>
    17ba:	43 e0       	ldi	r20, 0x03	; 3
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	68 e0       	ldi	r22, 0x08	; 8
    17c0:	80 e6       	ldi	r24, 0x60	; 96
    17c2:	96 e0       	ldi	r25, 0x06	; 6
    17c4:	4e df       	rcall	.-356    	; 0x1662 <ioport_configure_port_pin>
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	64 e0       	ldi	r22, 0x04	; 4
    17cc:	80 e6       	ldi	r24, 0x60	; 96
    17ce:	96 e0       	ldi	r25, 0x06	; 6
    17d0:	48 df       	rcall	.-368    	; 0x1662 <ioport_configure_port_pin>
    17d2:	43 e0       	ldi	r20, 0x03	; 3
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	68 e0       	ldi	r22, 0x08	; 8
    17d8:	80 e8       	ldi	r24, 0x80	; 128
    17da:	96 e0       	ldi	r25, 0x06	; 6
    17dc:	42 df       	rcall	.-380    	; 0x1662 <ioport_configure_port_pin>
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	64 e0       	ldi	r22, 0x04	; 4
    17e4:	80 e8       	ldi	r24, 0x80	; 128
    17e6:	96 e0       	ldi	r25, 0x06	; 6
    17e8:	3c cf       	rjmp	.-392    	; 0x1662 <ioport_configure_port_pin>
    17ea:	08 95       	ret

000017ec <main>:
#include <string.h>

#define SERIAL_CONNECTION	&USARTC0

int main (void)
{
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	ce 56       	subi	r28, 0x6E	; 110
    17f6:	d1 09       	sbc	r29, r1
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	de bf       	out	0x3e, r29	; 62
	// Initialize all components
	board_init();
    17fc:	5a df       	rcall	.-332    	; 0x16b2 <board_init>
	sysclk_init();
    17fe:	8f de       	rcall	.-738    	; 0x151e <sysclk_init>
	gfx_mono_init();
    1800:	d6 d8       	rcall	.-3668   	; 0x9ae <gfx_mono_st7565r_init>
		.paritytype = USART_PMODE_DISABLED_gc,
		.stopbits = false
	};

	// Initialize usart driver in RS232 mode
	usart_init_rs232(SERIAL_CONNECTION, &USART_SERIAL_OPTIONS);
    1802:	67 e0       	ldi	r22, 0x07	; 7
    1804:	70 e2       	ldi	r23, 0x20	; 32
    1806:	80 ea       	ldi	r24, 0xA0	; 160
    1808:	98 e0       	ldi	r25, 0x08	; 8
    180a:	5f da       	rcall	.-2882   	; 0xcca <usart_init_rs232>
    180c:	80 e1       	ldi	r24, 0x10	; 16
    180e:	e0 e8       	ldi	r30, 0x80	; 128
    1810:	f6 e0       	ldi	r31, 0x06	; 6
    1812:	85 83       	std	Z+5, r24	; 0x05
	// Enable display backlight
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);
	
	// Define game options
	const int MAX_LEVEL = 10;
	const char LEVELS[10][10] = {"6", "64", "647", "6479", "64791", "647912", "6479125", "64791250", "647912502", "6479125026"};
    1814:	84 e6       	ldi	r24, 0x64	; 100
    1816:	ee e0       	ldi	r30, 0x0E	; 14
    1818:	f0 e2       	ldi	r31, 0x20	; 32
    181a:	de 01       	movw	r26, r28
    181c:	11 96       	adiw	r26, 0x01	; 1
    181e:	01 90       	ld	r0, Z+
    1820:	0d 92       	st	X+, r0
    1822:	8a 95       	dec	r24
    1824:	e1 f7       	brne	.-8      	; 0x181e <main+0x32>
	{
		// Define initial game variables
		uint8_t current_level = 0;
		
		// Print rules and wait for enter
		gfx_mono_draw_string("Welcome!", 1, 0, &sysfont);
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e2       	ldi	r19, 0x20	; 32
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	61 e0       	ldi	r22, 0x01	; 1
    182e:	82 e7       	ldi	r24, 0x72	; 114
    1830:	90 e2       	ldi	r25, 0x20	; 32
    1832:	ee de       	rcall	.-548    	; 0x1610 <gfx_mono_draw_string>
		gfx_mono_draw_string("Press enter...", 1, 20, &sysfont);
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e2       	ldi	r19, 0x20	; 32
    1838:	44 e1       	ldi	r20, 0x14	; 20
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	8b e7       	ldi	r24, 0x7B	; 123
    183e:	90 e2       	ldi	r25, 0x20	; 32
    1840:	e7 de       	rcall	.-562    	; 0x1610 <gfx_mono_draw_string>
		
		// Wait for enter
		char input = usart_getchar(SERIAL_CONNECTION);
    1842:	80 ea       	ldi	r24, 0xA0	; 160
    1844:	98 e0       	ldi	r25, 0x08	; 8
    1846:	35 d9       	rcall	.-3478   	; 0xab2 <usart_getchar>
		while(input != '\r');
    1848:	8d 30       	cpi	r24, 0x0D	; 13
    184a:	09 f0       	breq	.+2      	; 0x184e <main+0x62>
    184c:	78 c0       	rjmp	.+240    	; 0x193e <main+0x152>
		
		while(current_level < MAX_LEVEL)
		{
			// Declare variables
			uint8_t entered_char = '\0';
			uint8_t entered_string[10] = {'\0'};
    184e:	7e 01       	movw	r14, r28
    1850:	85 e6       	ldi	r24, 0x65	; 101
    1852:	e8 0e       	add	r14, r24
    1854:	f1 1c       	adc	r15, r1
    1856:	0f 2e       	mov	r0, r31
    1858:	fa e0       	ldi	r31, 0x0A	; 10
    185a:	df 2e       	mov	r13, r31
    185c:	f0 2d       	mov	r31, r0
						
			// Show first level for a moment then clear screen
			gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
			gfx_mono_draw_string(LEVELS[current_level], 1, 0, &sysfont);
    185e:	0f 2e       	mov	r0, r31
    1860:	f5 e8       	ldi	r31, 0x85	; 133
    1862:	9f 2e       	mov	r9, r31
    1864:	f0 2d       	mov	r31, r0
    1866:	0f 2e       	mov	r0, r31
    1868:	f5 e4       	ldi	r31, 0x45	; 69
    186a:	af 2e       	mov	r10, r31
    186c:	f0 2d       	mov	r31, r0
    186e:	bb 24       	eor	r11, r11
    1870:	b3 94       	inc	r11
    1872:	c1 2c       	mov	r12, r1
    1874:	4c c0       	rjmp	.+152    	; 0x190e <main+0x122>
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	a1 09       	sbc	r26, r1
    187a:	b1 09       	sbc	r27, r1
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	a1 05       	cpc	r26, r1
    1880:	b1 05       	cpc	r27, r1
    1882:	c9 f7       	brne	.-14     	; 0x1876 <main+0x8a>
			delay_ms(250);
			gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
    1884:	00 e0       	ldi	r16, 0x00	; 0
    1886:	20 e2       	ldi	r18, 0x20	; 32
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	2c de       	rcall	.-936    	; 0x14e8 <gfx_mono_generic_draw_filled_rect>
				
			// Accept numbers
			gfx_mono_draw_string("Enter the numbers...", 1, 0, &sysfont);
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e2       	ldi	r19, 0x20	; 32
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	61 e0       	ldi	r22, 0x01	; 1
    1898:	8a e8       	ldi	r24, 0x8A	; 138
    189a:	90 e2       	ldi	r25, 0x20	; 32
    189c:	b9 de       	rcall	.-654    	; 0x1610 <gfx_mono_draw_string>
				
			uint8_t i = 0;
    189e:	10 e0       	ldi	r17, 0x00	; 0
			while(entered_char != '\r')
			{
				entered_char = usart_getchar(SERIAL_CONNECTION);
    18a0:	80 ea       	ldi	r24, 0xA0	; 160
    18a2:	98 e0       	ldi	r25, 0x08	; 8
    18a4:	06 d9       	rcall	.-3572   	; 0xab2 <usart_getchar>
				entered_string[i] = entered_char;
    18a6:	f7 01       	movw	r30, r14
    18a8:	e1 0f       	add	r30, r17
    18aa:	f1 1d       	adc	r31, r1
    18ac:	80 83       	st	Z, r24
				i++;
    18ae:	1f 5f       	subi	r17, 0xFF	; 255
				
			// Accept numbers
			gfx_mono_draw_string("Enter the numbers...", 1, 0, &sysfont);
				
			uint8_t i = 0;
			while(entered_char != '\r')
    18b0:	8d 30       	cpi	r24, 0x0D	; 13
    18b2:	b1 f7       	brne	.-20     	; 0x18a0 <main+0xb4>
				entered_string[i] = entered_char;
				i++;
			}
			
			// Clear screen
			gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
    18b4:	00 e0       	ldi	r16, 0x00	; 0
    18b6:	20 e2       	ldi	r18, 0x20	; 32
    18b8:	40 e8       	ldi	r20, 0x80	; 128
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	14 de       	rcall	.-984    	; 0x14e8 <gfx_mono_generic_draw_filled_rect>
			
			// Check for correctness
			if(strncmp(LEVELS[current_level], entered_string, current_level + 1) == 0)
    18c0:	99 81       	ldd	r25, Y+1	; 0x01
    18c2:	f7 01       	movw	r30, r14
    18c4:	80 81       	ld	r24, Z
    18c6:	98 13       	cpse	r25, r24
    18c8:	08 c0       	rjmp	.+16     	; 0x18da <main+0xee>
				current_level++;
				
				if(true)
				{
					// Final win screen
					gfx_mono_draw_string("You won the game!", 1, 0, &sysfont);
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e2       	ldi	r19, 0x20	; 32
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	61 e0       	ldi	r22, 0x01	; 1
    18d2:	8f e9       	ldi	r24, 0x9F	; 159
    18d4:	90 e2       	ldi	r25, 0x20	; 32
    18d6:	9c de       	rcall	.-712    	; 0x1610 <gfx_mono_draw_string>
    18d8:	15 c0       	rjmp	.+42     	; 0x1904 <main+0x118>
				}
			}
			else
			{
				// Incorrect answer
				gfx_mono_draw_string("Incorrect, game", 1, 0, &sysfont);
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e2       	ldi	r19, 0x20	; 32
    18de:	40 e0       	ldi	r20, 0x00	; 0
    18e0:	61 e0       	ldi	r22, 0x01	; 1
    18e2:	81 eb       	ldi	r24, 0xB1	; 177
    18e4:	90 e2       	ldi	r25, 0x20	; 32
    18e6:	94 de       	rcall	.-728    	; 0x1610 <gfx_mono_draw_string>
				gfx_mono_draw_string("restarted!", 1, 10, &sysfont);
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e2       	ldi	r19, 0x20	; 32
    18ec:	4d 2d       	mov	r20, r13
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	81 ec       	ldi	r24, 0xC1	; 193
    18f2:	90 e2       	ldi	r25, 0x20	; 32
    18f4:	8d de       	rcall	.-742    	; 0x1610 <gfx_mono_draw_string>
				gfx_mono_draw_string("Press enter...", 1, 20, &sysfont);
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e2       	ldi	r19, 0x20	; 32
    18fa:	44 e1       	ldi	r20, 0x14	; 20
    18fc:	61 e0       	ldi	r22, 0x01	; 1
    18fe:	8b e7       	ldi	r24, 0x7B	; 123
    1900:	90 e2       	ldi	r25, 0x20	; 32
    1902:	86 de       	rcall	.-756    	; 0x1610 <gfx_mono_draw_string>
				// Clear level stuff
				current_level = 0;
			}
			
			// Wait for enter
			input = usart_getchar(SERIAL_CONNECTION);
    1904:	80 ea       	ldi	r24, 0xA0	; 160
    1906:	98 e0       	ldi	r25, 0x08	; 8
    1908:	d4 d8       	rcall	.-3672   	; 0xab2 <usart_getchar>
			while(input != '\r');
    190a:	8d 30       	cpi	r24, 0x0D	; 13
    190c:	b9 f4       	brne	.+46     	; 0x193c <main+0x150>
		
		while(current_level < MAX_LEVEL)
		{
			// Declare variables
			uint8_t entered_char = '\0';
			uint8_t entered_string[10] = {'\0'};
    190e:	f7 01       	movw	r30, r14
    1910:	8d 2d       	mov	r24, r13
    1912:	11 92       	st	Z+, r1
    1914:	8a 95       	dec	r24
    1916:	e9 f7       	brne	.-6      	; 0x1912 <main+0x126>
						
			// Show first level for a moment then clear screen
			gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
    1918:	00 e0       	ldi	r16, 0x00	; 0
    191a:	20 e2       	ldi	r18, 0x20	; 32
    191c:	40 e8       	ldi	r20, 0x80	; 128
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	e2 dd       	rcall	.-1084   	; 0x14e8 <gfx_mono_generic_draw_filled_rect>
			gfx_mono_draw_string(LEVELS[current_level], 1, 0, &sysfont);
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e2       	ldi	r19, 0x20	; 32
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	ce 01       	movw	r24, r28
    192e:	01 96       	adiw	r24, 0x01	; 1
    1930:	6f de       	rcall	.-802    	; 0x1610 <gfx_mono_draw_string>
    1932:	89 2d       	mov	r24, r9
    1934:	9a 2d       	mov	r25, r10
    1936:	ab 2d       	mov	r26, r11
    1938:	bc 2d       	mov	r27, r12
    193a:	9d cf       	rjmp	.-198    	; 0x1876 <main+0x8a>
    193c:	ff cf       	rjmp	.-2      	; 0x193c <main+0x150>
    193e:	ff cf       	rjmp	.-2      	; 0x193e <main+0x152>

00001940 <__udivmodsi4>:
    1940:	a1 e2       	ldi	r26, 0x21	; 33
    1942:	1a 2e       	mov	r1, r26
    1944:	aa 1b       	sub	r26, r26
    1946:	bb 1b       	sub	r27, r27
    1948:	fd 01       	movw	r30, r26
    194a:	0d c0       	rjmp	.+26     	; 0x1966 <__udivmodsi4_ep>

0000194c <__udivmodsi4_loop>:
    194c:	aa 1f       	adc	r26, r26
    194e:	bb 1f       	adc	r27, r27
    1950:	ee 1f       	adc	r30, r30
    1952:	ff 1f       	adc	r31, r31
    1954:	a2 17       	cp	r26, r18
    1956:	b3 07       	cpc	r27, r19
    1958:	e4 07       	cpc	r30, r20
    195a:	f5 07       	cpc	r31, r21
    195c:	20 f0       	brcs	.+8      	; 0x1966 <__udivmodsi4_ep>
    195e:	a2 1b       	sub	r26, r18
    1960:	b3 0b       	sbc	r27, r19
    1962:	e4 0b       	sbc	r30, r20
    1964:	f5 0b       	sbc	r31, r21

00001966 <__udivmodsi4_ep>:
    1966:	66 1f       	adc	r22, r22
    1968:	77 1f       	adc	r23, r23
    196a:	88 1f       	adc	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	1a 94       	dec	r1
    1970:	69 f7       	brne	.-38     	; 0x194c <__udivmodsi4_loop>
    1972:	60 95       	com	r22
    1974:	70 95       	com	r23
    1976:	80 95       	com	r24
    1978:	90 95       	com	r25
    197a:	9b 01       	movw	r18, r22
    197c:	ac 01       	movw	r20, r24
    197e:	bd 01       	movw	r22, r26
    1980:	cf 01       	movw	r24, r30
    1982:	08 95       	ret

00001984 <_exit>:
    1984:	f8 94       	cli

00001986 <__stop_program>:
    1986:	ff cf       	rjmp	.-2      	; 0x1986 <__stop_program>
